<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo博客搭建超详细过程</title>
      <link href="/2023/11/24/hexoBuild/"/>
      <url>/2023/11/24/hexoBuild/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>从我入行以来，一直想搭建一个自己博客来记录自己的想法和遇到的问题。最近失业以后时间多了起来，花了大概一周的时间，把这个博客搭起来了，于是想写一篇文章来记录搭建的详细流程作为本站的一篇文章，这对于我而言也是一个新的开始！</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>搭建之前，我们需要提前有以下准备：</p><ul><li>安装了node环境</li><li>注册了github账号</li><li>安装了git</li><li>购买了自己的域名（最好有）</li><li>安装了markdown编辑器（我使用的是typora）</li></ul><h1 id="Hexo初体验"><a href="#Hexo初体验" class="headerlink" title="Hexo初体验"></a>Hexo初体验</h1><p>Hexo是可以一个解析md文件，生成静态网页的博客框架，支持多种主题，而且支持部署到github page。我们先来体验一下。</p><p>在cmd中输入命令全局安装Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后，输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>如果跟下图一样出现版本号，表示安装成功。</p><p><img src="/2023/11/24/hexoBuild/image-20231124162529375.png" alt="image-20231124162529375"></p><p>在我们的工作目录打开cmd，执行<code>hexo init</code>创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo-blog-demo(项目名)</span><br></pre></td></tr></table></figure><p><img src="/2023/11/24/hexoBuild/image-20231124200447068.png" alt="image-20231124200447068"></p><p>接下来进入到该项目下，较新版本的 hexo 在执行 <code>hexo init</code> 时会自行安装好依赖，因此不需要再额外执行<code>npm i</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line">或者</span><br><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p>打开 <a href="http://localhost:4000/">http://localhost:4000</a> 后，就会看到你的Hexo博客跑起来了！</p><blockquote><p>更多命令可以 <a href="https://hexo.io/zh-cn/docs/commands">点击查看</a>。</p></blockquote><h1 id="github-page配置"><a href="#github-page配置" class="headerlink" title="github page配置"></a>github page配置</h1><p>Hexo有个命令<code>hexo g</code>或者<code>hexo genarate</code>，会直接遍历项目中的静态文件来生成静态网页。将这些静态网页挂载到github page就可以直接访问，而不需要另外的服务器了。接下来我们来配置一下。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>访问github，new 一个 repository。</p><blockquote><p>科学上网的重要性，包括后续有可能出现ssh连接超时等问题时，都可以试试挂个代理</p></blockquote><p>注意仓库名一定要是<code>[用户名].github.io</code>，一定要这个格式，一定要是这个格式，一定要是这个格式，重要的事情说三遍！</p><p>然后仓库一定要是<code>pubilc</code>，仓库一定要是<code>pubilc</code>，仓库一定要是<code>pubilc</code>，这个也说三遍！</p><p><img src="/2023/11/24/hexoBuild/image-20231124202636255.png" alt="image-20231124202636255"></p><h2 id="挂载到github-page"><a href="#挂载到github-page" class="headerlink" title="挂载到github page"></a>挂载到github page</h2><p>首先安装 hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后找到项目_config.yml文件，在最下面添加以下代码，代码中的【用户名】填你自己的github用户名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:【用户名】/【用户名】.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><blockquote><p>这个文件是Hexo的配置文件，更多详细的配置可以 <a href="https://hexo.io/zh-cn/docs/configuration">点击查看</a>。</p></blockquote><p>修改保存以后，直接部署到github试一下吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate // 生成静态文件</span><br><span class="line">hexo deploy // 部署到github</span><br></pre></td></tr></table></figure><p>第二个命令执行完成出现<code>Deploy done</code>字样时说明成功了。等待一会，再进入https:&#x2F;&#x2F;【用户名】.github.io就可以看到博客已经挂载成功了。</p><blockquote><p>拓展：其实到这会发现，github上管理的是hexo g生成的静态文件，类似dist。而我们hexo init新建的项目没有通过github管理，是手动hexo generate &amp;&amp;  hexo deploy部署上去的。所以我们可以再新建一个项目存放hexo新建的项目，并通过CICD来执行前面的指令，这样就只需要提交代码就能自动生成静态文件并部署到github page。</p></blockquote><h1 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h1><p>Vercel是一个云服务平台，特别适合我们Hexo项目部署，还能提供全球CDN加速。</p><p>Vercel自带CICD，授权github项目给Vercel后，我们使用<code>hexo deploy</code>以后提交到github，Vercel就会帮我们自动部署，操作简单，可谓是非常之优雅。</p><p><img src="/2023/11/24/hexoBuild/%E4%BC%98%E9%9B%85.webp" alt="优雅"></p><p><a href="https://vercel.com/">点击这里进入Vercel</a>，注册账号并登录。</p><p><img src="/2023/11/24/hexoBuild/image-20231125234021997.png" alt="image-20231125234021997"></p><p>使用github账号关联，在新建项目的时候可以直接托管该github账号的项目。</p><h2 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h2><p>接下来创建项目并关联对应的项目，并关联【用户名】.github.io项目</p><p><img src="/2023/11/24/hexoBuild/image-20231125234253370.png" alt="image-20231125234253370"></p><p><img src="/2023/11/24/hexoBuild/image-20231125235505317.png" alt="image-20231125235505317"></p><p><img src="/2023/11/24/hexoBuild/image-20231125235841531.png" alt="image-20231125235841531"></p><p>点击deploy，等待一会，出现下面的界面。</p><p><img src="/2023/11/24/hexoBuild/image-20231126000012845.png" alt="image-20231126000012845"></p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>接下来配置到自己的域名，点击domains配置。</p><p><img src="/2023/11/24/hexoBuild/image-20231126000157214.png" alt="image-20231126000157214"></p><p>输入购买的域名点击add。</p><p><img src="/2023/11/24/hexoBuild/image-20231126000721235.png" alt="image-20231126000721235"></p><p>提示我们在购买域名的云平台去添加解析记录。</p><p><img src="/2023/11/24/hexoBuild/image-20231126000829839.png" alt="image-20231126000829839"></p><p>我使用的是阿里云上购买的域名，接下来进入阿里云的<code>域名解析</code>。</p><p><img src="/2023/11/24/hexoBuild/image-20231126001315843.png" alt="image-20231126001315843"></p><p>按照要求vercel上的填写两条记录，填写完成后即可。</p><blockquote><p>添加完成以后，可以使用阿里云的dns检测工具，其他的要做的就是等待了。</p></blockquote><h1 id="butterfly主题应用"><a href="#butterfly主题应用" class="headerlink" title="butterfly主题应用"></a>butterfly主题应用</h1><p>Hexo默认的样式并不好看，接下来换个主题。我使用的是<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>。更多主题可以<a href="https://hexo.io/themes/">点击查看</a>。</p><p>1.在项目目录执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly // butterfly主题</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save // butterfly主题需要的依赖包</span><br></pre></td></tr></table></figure><p>2.修改<code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>3.将<code>node_modules</code>中的<code>_config.yml</code>复制出来到项目的根目录，并重命名为<code>_config.butterfly.yml</code>方便后续魔改。<code>_config.butterfly.yml</code>生效的优先级会高于<code>_config.yml</code></p><p><img src="/2023/11/24/hexoBuild/image-20231124221147987.png" alt="image-20231124221147987"></p><h1 id="额外的插件"><a href="#额外的插件" class="headerlink" title="额外的插件"></a>额外的插件</h1><p>应用了一些插件，修改了一些样式和配置，这里就不展开讲啦。</p><p>Live2d看板娘：<a href="https://github.com/EYHN/hexo-helper-live2d/blob/HEAD/README.zh-CN.md">https://github.com/EYHN/hexo-helper-live2d/blob/HEAD/README.zh-CN.md</a></p><p>首页分类：<a href="https://zfe.space/post/hexo-magnet.html">https://zfe.space/post/hexo-magnet.html</a></p><p>首页轮播图：<a href="https://github.com/Akilarlxh/hexo-butterfly-swiper">https://github.com/Akilarlxh/hexo-butterfly-swiper</a></p><h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>至此，整个博客就完成了，可以写文章了。</p><p>文章通过<code>hexo new</code>生成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/11/24/hexoBuild/image-20231124223544444.png" alt="image-20231124223544444"></p><p>执行命令后会在<code>source/posts</code>目录下生成一个单独的md文件。</p><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>Front-matter 是md文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，以下是官网罗列出的参数。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td><td align="left"><code>null</code></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">纯文本的页面摘要。使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td align="left">false</td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td align="left">继承自 <code>_config.yml</code></td></tr><tr><td align="left"><code>published</code></td><td align="left">文章是否发布</td><td align="left">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td></tr></tbody></table><p>这些参数在不同的主题，有不一样的体现，甚至不同的主题有自己的参数。</p><h2 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h2><p>source目录是存放资源的地方，引用图片也是直接以这个目录作为根目录。我们一般会在source目录下新建一个images目录用于单独存放图片来引用。但是文章内引用的图片很多，归类混乱不易维护。</p><p>官方提供了一个方案如下图，算了你还是别看官方解释了，我给你翻译翻译，就是post_asset_folder配置打开以后，新建文章时，会同时在文章的存放目录生成一个同名的文件夹，用来存放资源。</p><p><img src="/2023/11/24/hexoBuild/image-20231124224809423.png" alt="image-20231124224809423"></p><p>咋一看好像没什么用，但是结合typora的话，就有很大的便利了。</p><p>我们在_config.yml&#96;文件中修改以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>再在typora中修改图片复制的设置</p><p><img src="/2023/11/24/hexoBuild/image-20231124225356273.png" alt="image-20231124225356273"></p><p>再到<code>scaffolds</code>目录下的<code>post.md</code>添加一条<code>Front-matter</code>。</p><p>ps：这个<code>post.md</code>是创建文章时的模板，写入的内容会出现在每一篇新创建的文章里。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typora-root-url: &#123;&#123; title &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/24/hexoBuild/image-20231124230353479.png" alt="image-20231124230353479"></p><p>完成这三步后，在用typora写文章时，复制图片（包括截图工具截取、从网页复制或者直接复制本地文件）会直接复制到当前编辑的这个md文件同级的文件夹下，而且也不需要手动修改图片路径就能在网站正常显示，非常之舒服。</p><h1 id="说在最后"><a href="#说在最后" class="headerlink" title="说在最后"></a>说在最后</h1><p>感谢能看到这里，本博客会持续优化，内容也会继续更新。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>post_test</title>
      <link href="/2023/11/24/post-test/"/>
      <url>/2023/11/24/post-test/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/11/24/post-test/image-20231124030828678.png" alt="image-20231124030828678"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="/2023/11/20/test5/"/>
      <url>/2023/11/20/test5/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍一下CSS的盒子模型"><a href="#介绍一下CSS的盒子模型" class="headerlink" title="介绍一下CSS的盒子模型"></a>介绍一下CSS的盒子模型</h2><blockquote><p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p></blockquote><h2 id="img标签的title和alt有什么区别？"><a href="#img标签的title和alt有什么区别？" class="headerlink" title="img标签的title和alt有什么区别？"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p><h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p><p>apng: 可以替代gif，向下兼容。</p>]]></content>
      
      
      <categories>
          
          <category> test5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="/2023/11/20/test4/"/>
      <url>/2023/11/20/test4/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍一下CSS的盒子模型"><a href="#介绍一下CSS的盒子模型" class="headerlink" title="介绍一下CSS的盒子模型"></a>介绍一下CSS的盒子模型</h2><blockquote><p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p></blockquote><h2 id="img标签的title和alt有什么区别？"><a href="#img标签的title和alt有什么区别？" class="headerlink" title="img标签的title和alt有什么区别？"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p><h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p><p>apng: 可以替代gif，向下兼容。</p>]]></content>
      
      
      <categories>
          
          <category> test3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="/2023/11/20/test3/"/>
      <url>/2023/11/20/test3/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍一下CSS的盒子模型"><a href="#介绍一下CSS的盒子模型" class="headerlink" title="介绍一下CSS的盒子模型"></a>介绍一下CSS的盒子模型</h2><blockquote><p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p></blockquote><h2 id="img标签的title和alt有什么区别？"><a href="#img标签的title和alt有什么区别？" class="headerlink" title="img标签的title和alt有什么区别？"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p><h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p><p>apng: 可以替代gif，向下兼容。</p>]]></content>
      
      
      <categories>
          
          <category> test4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="/2023/11/20/test2/"/>
      <url>/2023/11/20/test2/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍一下CSS的盒子模型"><a href="#介绍一下CSS的盒子模型" class="headerlink" title="介绍一下CSS的盒子模型"></a>介绍一下CSS的盒子模型</h2><blockquote><p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p></blockquote><h2 id="img标签的title和alt有什么区别？"><a href="#img标签的title和alt有什么区别？" class="headerlink" title="img标签的title和alt有什么区别？"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p><h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p><p>apng: 可以替代gif，向下兼容。</p>]]></content>
      
      
      <categories>
          
          <category> test2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test1</title>
      <link href="/2023/11/20/test1/"/>
      <url>/2023/11/20/test1/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍一下CSS的盒子模型"><a href="#介绍一下CSS的盒子模型" class="headerlink" title="介绍一下CSS的盒子模型"></a>介绍一下CSS的盒子模型</h2><blockquote><p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p></blockquote><h2 id="img标签的title和alt有什么区别？"><a href="#img标签的title和alt有什么区别？" class="headerlink" title="img标签的title和alt有什么区别？"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p><h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p><p>apng: 可以替代gif，向下兼容。</p>]]></content>
      
      
      <categories>
          
          <category> test1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test1-1</title>
      <link href="/2023/11/20/test1-1/"/>
      <url>/2023/11/20/test1-1/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍一下CSS的盒子模型"><a href="#介绍一下CSS的盒子模型" class="headerlink" title="介绍一下CSS的盒子模型"></a>介绍一下CSS的盒子模型</h2><blockquote><p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p></blockquote><h2 id="img标签的title和alt有什么区别？"><a href="#img标签的title和alt有什么区别？" class="headerlink" title="img标签的title和alt有什么区别？"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p><h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p><p>apng: 可以替代gif，向下兼容。</p>]]></content>
      
      
      <categories>
          
          <category> test1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/20/hello-world/"/>
      <url>/2023/11/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css面试题</title>
      <link href="/2023/11/20/css%E9%9D%A2%E8%AF%95%E9%A2%982/"/>
      <url>/2023/11/20/css%E9%9D%A2%E8%AF%95%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍一下CSS的盒子模型"><a href="#介绍一下CSS的盒子模型" class="headerlink" title="介绍一下CSS的盒子模型"></a>介绍一下CSS的盒子模型</h2><blockquote><p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p></blockquote><h2 id="img标签的title和alt有什么区别？"><a href="#img标签的title和alt有什么区别？" class="headerlink" title="img标签的title和alt有什么区别？"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>  title ： 鼠标移入到图片显示的值<br>  alt   ： 图片无法加载时显示的值<br>区别二：<br>  在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p><h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p><p>apng: 可以替代gif，向下兼容。</p><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>BFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</p><ol><li>了解BFC ： 块级格式化上下文。</li><li>BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。</li><li>如何触发BFC：<br>float的值非none<br>overflow的值非visible<br>display的值为：inline-block、table-cell…<br>position的值为:absoute、fixed</li></ol><h2 id="清除浮动有哪些方式？"><a href="#清除浮动有哪些方式？" class="headerlink" title="清除浮动有哪些方式？"></a>清除浮动有哪些方式？</h2><ol><li>触发BFC</li><li>多创建一个盒子，添加样式：clear: both;</li><li>after方式<br>ul:after{<br>​content: ‘’;<br>​display: block;<br>​clear: both;<br>}</li></ol><h2 id="ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉"><a href="#ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉" class="headerlink" title="ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉"></a>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h2><style>    a,button,input,textarea{        -webkit-tap-highlight-color: rgba(0,0,0,0);    }</style><h2 id="webkit表单输入框placeholder的颜色值能改变吗"><a href="#webkit表单输入框placeholder的颜色值能改变吗" class="headerlink" title="webkit表单输入框placeholder的颜色值能改变吗"></a>webkit表单输入框placeholder的颜色值能改变吗</h2><style type="text/css">    input::-webkit-input-placeholder{        color:red;    }</style><h2 id="禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片"><a href="#禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片" class="headerlink" title="禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片"></a>禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">touch-callout: none;</span><br><span class="line">-webkit-touch-callout: none;</span><br><span class="line"></span><br><span class="line">user-select:none;</span><br><span class="line">-webkit-user-select:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁止ios和android用户选中文字"><a href="#禁止ios和android用户选中文字" class="headerlink" title="禁止ios和android用户选中文字"></a>禁止ios和android用户选中文字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">user-select:none;</span><br><span class="line">-webkit-user-select:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS的引入方式有哪些？link和-import的区别是什么？"><a href="#CSS的引入方式有哪些？link和-import的区别是什么？" class="headerlink" title="CSS的引入方式有哪些？link和@import的区别是什么？"></a>CSS的引入方式有哪些？link和@import的区别是什么？</h2><blockquote><p>CSS有3种引入方式。</p><ul><li>行内式是指将样式写在元素的 style属性内。</li><li>内嵌式是指将样式写在 style元素内。</li><li>外链式是指通过link标签，引入CSS文件内的样式。</li></ul><p>通过link标签引入样式与通过@ import方法引入样式有如下区别。</p><p>（1）加载资源的限制。</p><p>link是 XHTML的标签，除了加载CSS文件外，还可以加载RSS等其他事务，如加载模板等。</p><p>@ import只能加载CSS文件。</p><p>（2）加载方式。</p><p>如果用link引用CSS，在页面载入时同时加载，即同步加载。</p><p>如果用@ import引用CSS，则需要等到网页完全载入后，再加载CSS文件，即异步加载。</p><p>（3）兼容性。</p><p>link是 XHTML的标签，没有兼容问题。</p><p>@ import是在CSS2.1中提出的，不支持低版本的浏览器。</p><p>（4）改变样式</p><p>link的标签是DOM元素，支持使用 JavaScript控制DOM和修改样式；@ import是种方法，不支持控制DOM和修改样式。</p></blockquote><h2 id="CSS优先级如何排序？"><a href="#CSS优先级如何排序？" class="headerlink" title="CSS优先级如何排序？"></a>CSS优先级如何排序？</h2><p><img src="C:\Users\刘好鸭儿廋先生\AppData\Roaming\Typora\typora-user-images\1693760839916.png" alt="1693760839916"></p><h2 id="用CSS画一个三角形"><a href="#用CSS画一个三角形" class="headerlink" title="用CSS画一个三角形"></a>用CSS画一个三角形</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-left:100px solid transparent;</span><br><span class="line">border-right:100px solid transparent;</span><br><span class="line">border-top:100px solid transparent;</span><br><span class="line">border-bottom:100px solid #ccc;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css面试题</title>
      <link href="/2023/11/20/css%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/11/20/css%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍一下CSS的盒子模型"><a href="#介绍一下CSS的盒子模型" class="headerlink" title="介绍一下CSS的盒子模型"></a>介绍一下CSS的盒子模型</h2><blockquote><p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p></blockquote><h2 id="img标签的title和alt有什么区别？"><a href="#img标签的title和alt有什么区别？" class="headerlink" title="img标签的title和alt有什么区别？"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>  title ： 鼠标移入到图片显示的值<br>  alt   ： 图片无法加载时显示的值<br>区别二：<br>  在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p><h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p><p>apng: 可以替代gif，向下兼容。</p><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>BFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</p><ol><li>了解BFC ： 块级格式化上下文。</li><li>BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。</li><li>如何触发BFC：<br>float的值非none<br>overflow的值非visible<br>display的值为：inline-block、table-cell…<br>position的值为:absoute、fixed</li></ol><h2 id="清除浮动有哪些方式？"><a href="#清除浮动有哪些方式？" class="headerlink" title="清除浮动有哪些方式？"></a>清除浮动有哪些方式？</h2><ol><li>触发BFC</li><li>多创建一个盒子，添加样式：clear: both;</li><li>after方式<br>ul:after{<br>​content: ‘’;<br>​display: block;<br>​clear: both;<br>}</li></ol><h2 id="ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉"><a href="#ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉" class="headerlink" title="ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉"></a>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h2><style>    a,button,input,textarea{        -webkit-tap-highlight-color: rgba(0,0,0,0);    }</style><h2 id="webkit表单输入框placeholder的颜色值能改变吗"><a href="#webkit表单输入框placeholder的颜色值能改变吗" class="headerlink" title="webkit表单输入框placeholder的颜色值能改变吗"></a>webkit表单输入框placeholder的颜色值能改变吗</h2><style type="text/css">    input::-webkit-input-placeholder{        color:red;    }</style><h2 id="禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片"><a href="#禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片" class="headerlink" title="禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片"></a>禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">touch-callout: none;</span><br><span class="line">-webkit-touch-callout: none;</span><br><span class="line"></span><br><span class="line">user-select:none;</span><br><span class="line">-webkit-user-select:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁止ios和android用户选中文字"><a href="#禁止ios和android用户选中文字" class="headerlink" title="禁止ios和android用户选中文字"></a>禁止ios和android用户选中文字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">user-select:none;</span><br><span class="line">-webkit-user-select:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS的引入方式有哪些？link和-import的区别是什么？"><a href="#CSS的引入方式有哪些？link和-import的区别是什么？" class="headerlink" title="CSS的引入方式有哪些？link和@import的区别是什么？"></a>CSS的引入方式有哪些？link和@import的区别是什么？</h2><blockquote><p>CSS有3种引入方式。</p><ul><li>行内式是指将样式写在元素的 style属性内。</li><li>内嵌式是指将样式写在 style元素内。</li><li>外链式是指通过link标签，引入CSS文件内的样式。</li></ul><p>通过link标签引入样式与通过@ import方法引入样式有如下区别。</p><p>（1）加载资源的限制。</p><p>link是 XHTML的标签，除了加载CSS文件外，还可以加载RSS等其他事务，如加载模板等。</p><p>@ import只能加载CSS文件。</p><p>（2）加载方式。</p><p>如果用link引用CSS，在页面载入时同时加载，即同步加载。</p><p>如果用@ import引用CSS，则需要等到网页完全载入后，再加载CSS文件，即异步加载。</p><p>（3）兼容性。</p><p>link是 XHTML的标签，没有兼容问题。</p><p>@ import是在CSS2.1中提出的，不支持低版本的浏览器。</p><p>（4）改变样式</p><p>link的标签是DOM元素，支持使用 JavaScript控制DOM和修改样式；@ import是种方法，不支持控制DOM和修改样式。</p></blockquote><h2 id="CSS优先级如何排序？"><a href="#CSS优先级如何排序？" class="headerlink" title="CSS优先级如何排序？"></a>CSS优先级如何排序？</h2><p><img src="C:\Users\刘好鸭儿廋先生\AppData\Roaming\Typora\typora-user-images\1693760839916.png" alt="1693760839916"></p><h2 id="用CSS画一个三角形"><a href="#用CSS画一个三角形" class="headerlink" title="用CSS画一个三角形"></a>用CSS画一个三角形</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-left:100px solid transparent;</span><br><span class="line">border-right:100px solid transparent;</span><br><span class="line">border-top:100px solid transparent;</span><br><span class="line">border-bottom:100px solid #ccc;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
