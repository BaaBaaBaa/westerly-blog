{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"source/img/1057805.png","path":"img/1057805.png","modified":1,"renderable":0},{"_id":"source/img/1102573.jpg","path":"img/1102573.jpg","modified":1,"renderable":0},{"_id":"source/img/1156990.jpg","path":"img/1156990.jpg","modified":1,"renderable":0},{"_id":"source/img/20221022.jpg","path":"img/20221022.jpg","modified":1,"renderable":0},{"_id":"source/img/704733.jpg","path":"img/704733.jpg","modified":1,"renderable":0},{"_id":"source/img/765121.png","path":"img/765121.png","modified":1,"renderable":0},{"_id":"source/img/794592.jpg","path":"img/794592.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.svg","path":"img/favicon.svg","modified":1,"renderable":0}],"Cache":[{"_id":"source/music/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1699969309200},{"_id":"source/_data/link.yml","hash":"331fdf02fcbd6473541d686ee5438e03a47b7584","modified":1699968487576},{"_id":"source/categories/index.md","hash":"54843df778233b6ced5548b6cf4f4aa4eee0b76d","modified":1700387872675},{"_id":"source/_posts/css面试题.md","hash":"b46d0af979a76d112909dedf2675f2fb0b641891","modified":1700410096769},{"_id":"source/_posts/css面试题2.md","hash":"504b8bc09879d684dc664d26a5d3b50a15c46c7b","modified":1700390143882},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"source/_posts/hexoBuild.md","hash":"c5a3af3c15a5159c52963d18ce984fc55975bf45","modified":1700934541382},{"_id":"source/_posts/mobileAdaptation.md","hash":"3a7e4f5ae62651bb04a7418f15b59353c0cd5b73","modified":1701807157298},{"_id":"source/_posts/post-test.md","hash":"24903c604586df7904ae9c7c5221c60e8cab51a2","modified":1700766514236},{"_id":"source/_posts/test1-1.md","hash":"97be26d20228e27a802b10715cb44943f9eb847e","modified":1700409879282},{"_id":"source/_posts/test1.md","hash":"1dcba8f3726482637f8215e2b16d4f9b3f524a9a","modified":1700409879288},{"_id":"source/_posts/test2.md","hash":"dd088e9449add1b88e235c1e305a9486ed8312b6","modified":1700410096770},{"_id":"source/_posts/test3.md","hash":"30dbc935907a0070cc673029c996e96533fcfe7b","modified":1700410103352},{"_id":"source/_posts/test4.md","hash":"b9d26291c10bee3c2671bd5a524ef5eb00dafddd","modified":1700410110297},{"_id":"source/_posts/test5.md","hash":"2c4c757e92d4e7e08e82e9b10ec4983874a5f1d9","modified":1700409879285},{"_id":"source/_posts/tinifyTool.md","hash":"9e3a6588321d3a12875e8adaf7a13503089b3a5f","modified":1704507924022},{"_id":"source/css/universe.css","hash":"3caec14fcc14982a2330c35446745421ba43756a","modified":1700410526903},{"_id":"source/css/custom.css","hash":"a554e229527ae51ace2929ad58a9d598b21c3a47","modified":1700410350463},{"_id":"source/img/favicon.svg","hash":"9865ac5337a7b061a9c06995398722b066ae665c","modified":1700387517214},{"_id":"source/js/universe.js","hash":"7e0a822110964ba8cc8816c3cabc0a5f5c134d39","modified":1700410526901},{"_id":"source/link/index.md","hash":"d6afe7b4cf85465ad7240b430afacf8a1415e37b","modified":1699968487572},{"_id":"source/tags/index.md","hash":"60476af8b5903353044153614d5978f2ab92ab1b","modified":1699968813370},{"_id":"source/_posts/hexoBuild/749ce5f439144de7a0b150c889fc3b6fa3c54abd.jpg@1256w_1258h_!web-article-pic.avif","hash":"d60cbb30389f75e00ab550ff68d6a7d645c96a1e","modified":1700839688178},{"_id":"source/_posts/hexoBuild/82fa72b4f744b86815471ccc28642835c05613bb.jpg@1256w_1258h_!web-article-pic.avif","hash":"70fab91d39ebc1ae147348f05db3c9bf29918d07","modified":1700839696661},{"_id":"source/_posts/hexoBuild/image-20231124162529375.png","hash":"bbc3e727cfe7b073fb044b00d111bfb86cc710bb","modified":1700814329380},{"_id":"source/_posts/hexoBuild/image-20231124200447068.png","hash":"c01ae283eaf5ca392909146573ffea5e46a0af5c","modified":1700827487075},{"_id":"source/_posts/hexoBuild/image-20231124221147987.png","hash":"3dc1ac787ca4c76d632112d5e61379107c36f297","modified":1700835107994},{"_id":"source/_posts/hexoBuild/image-20231124223544444.png","hash":"f92cce51d4805b372130ca652819e7e385d175b0","modified":1700836544448},{"_id":"source/_posts/hexoBuild/image-20231124224809423.png","hash":"78eb95762b62340c6a7e02c51dc23824b2af62ba","modified":1700837289436},{"_id":"source/_posts/hexoBuild/image-20231124225356273.png","hash":"4133eed2af4f2fc482b36c4c7c10e79f38746a51","modified":1700837636309},{"_id":"source/_posts/hexoBuild/image-20231124230353479.png","hash":"dbcf5477dd5de54bc45bed98514db2384fae0bfe","modified":1700838233482},{"_id":"source/_posts/hexoBuild/image-20231125234021997.png","hash":"f5126fdfb6bf45aaf04d63ef175e83d29e12c6da","modified":1700926822037},{"_id":"source/_posts/hexoBuild/image-20231125234253370.png","hash":"a4f6029846186465fc3ac1d2193817532dbb6709","modified":1700926973376},{"_id":"source/_posts/hexoBuild/image-20231125235814852.png","hash":"3e76f5a1c2dd4f2e314ca859404f8b4837f64fb6","modified":1700927894871},{"_id":"source/_posts/hexoBuild/image-20231125235830604.png","hash":"8da02129da0269f029d5d38813482de2f9023035","modified":1700927910628},{"_id":"source/_posts/hexoBuild/image-20231126000522216.png","hash":"8b409df747abe742d1415ee1b0c759fc1b94275f","modified":1700928322243},{"_id":"source/_posts/hexoBuild/image-20231126000721235.png","hash":"0f074640f32f949dc0303250fb892441d9444d96","modified":1700928441256},{"_id":"source/_posts/hexoBuild/优雅.webp","hash":"cf3633ccbc750eef8ad304f6f8c9bf4bcb7696b0","modified":1700841764399},{"_id":"source/_posts/post-test/1700765121908.png","hash":"9252820e101190cb1b1c535567bb7d1188f78bf9","modified":1700765121926},{"_id":"source/_posts/post-test/1700765478961.png","hash":"9252820e101190cb1b1c535567bb7d1188f78bf9","modified":1700765478980},{"_id":"source/_posts/post-test/1700765616084.png","hash":"fc4777987acb37a5f6551aa3e409409924e99b65","modified":1700765616093},{"_id":"source/_posts/post-test/image-20231124030828678.png","hash":"673bfa1aab8a72910d3e9a74e6bd973acdaf5a66","modified":1700766508699},{"_id":"source/_posts/tinifyTool/17044221850475.jpg","hash":"38904ee7df3dc9ea9ca53e12342b619cef813230","modified":1704506778711},{"_id":"source/_posts/tinifyTool/17044362771852.jpg","hash":"d69157347c3a9a02574a6e3dc4eca8928bcb28ef","modified":1704506778721},{"_id":"source/_posts/tinifyTool/17044380088332.jpg","hash":"c264b842004c30d526d2e9e7e0b1a6f02aae94c6","modified":1704506778722},{"_id":"source/_posts/tinifyTool/17044397074751.jpg","hash":"ffd8612d96bc6227ac506cef6bc773d9be7a0ef0","modified":1704506778723},{"_id":"source/_posts/tinifyTool/17044389253668.jpg","hash":"5437e5d785a3847e9404f51afdf316c396656e3a","modified":1704506778722},{"_id":"source/img/avatar.jpg","hash":"5db50e6b88b990204d9711adcb7b4266b2d49df0","modified":1700386696337},{"_id":"source/_posts/hexoBuild/image-20231124202636255.png","hash":"33a2bceb5faae2c135efd70f53023dc34f93afa5","modified":1700828796283},{"_id":"source/_posts/hexoBuild/image-20231125235505317.png","hash":"5cf76d74dc405a2c67f968bd0156646c4c1ab528","modified":1700927705355},{"_id":"source/_posts/hexoBuild/image-20231125235841531.png","hash":"f7ecd5800d4d9e38eaef2986cbb296c72c4e0b9b","modified":1700927921569},{"_id":"source/_posts/hexoBuild/image-20231126000829839.png","hash":"b958eb5316e279f4323d00c55109c6bc6b5e55ce","modified":1700928509869},{"_id":"source/_posts/hexoBuild/image-20231126001315843.png","hash":"5110cd252280fca2a832b951243a2ba833843540","modified":1700928795872},{"_id":"source/_posts/mobileAdaptation/image-20231205143957173.png","hash":"b9fdfa2620a925594a759990c1fc780caf1c26dd","modified":1701758397186},{"_id":"source/_posts/post-test/1700764793648.png","hash":"05d0852fe66e24ed5c8c0c3f2c4618842b1c13ec","modified":1700764793678},{"_id":"source/_posts/tinifyTool/17044358678824.jpg","hash":"d758ae55e1d368e285b9ac51bcfcf9c949b0795f","modified":1704506778715},{"_id":"source/_posts/tinifyTool/17044359222573.jpg","hash":"cd0b82c78faf75c5ed3d53d950be3674520ee134","modified":1704506778716},{"_id":"source/_posts/tinifyTool/17044416300532.jpg","hash":"4b4dbe06db299080ef9d9f3e8662d3c69bf4d5a2","modified":1704506778725},{"_id":"source/img/1102573.jpg","hash":"3548aff0ff28be8915ed00a843935c0bef22c849","modified":1704514253542},{"_id":"source/_posts/tinifyTool/17044360186641.jpg","hash":"69269ef259b6a3e8cc6cb2bdeae6d47f623e47c0","modified":1704506778718},{"_id":"source/_posts/tinifyTool/17044362356415.jpg","hash":"d9ac38a75641916ebb7630ab1800a088b878dd8a","modified":1704506778720},{"_id":"source/_posts/hexoBuild/image-20231126000157214.png","hash":"3e8a94c19a4e09128cba62e5ab2e9217ae0bebc9","modified":1700928117257},{"_id":"source/_posts/tinifyTool/17044356164108.jpg","hash":"55d9cc687dbf8d5f04481e7b8c12c7cadfec0a10","modified":1704506778714},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"262fba7e30cc966b66e6b7aee99f295b15eba724","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"421b77b99c85035f34183ff14cbfbc4dff1a3078","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"c52c8e4ae962b18cdd84db997cb7c41792e5fb35","modified":1700413092182},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"9b7647f0abda10287f86f66ef81eedbb417459b7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"f03129356c788bf47071c3f007f2ef5b6b1498af","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"022b870ee8ad7ac05d1569268b61899d2f706221","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"4b4f882a393cbf5b3dfc2b218608a09905f3e3db","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"ffb13539d343498b7d7093c546831a8bde90b6a2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"a5c7d362ae63474c1a4e3eb5cd09804b3684e984","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"50d1b08367f709e5416140043933e79cd8d77559","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"3ec354778f6a4ac97fb64d5629c83b293ccceb5e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"029eebbdcb3c682780d1de629fa06858cbe9782b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"f853075c1399be950107247b1fe79cdd086120e4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"1ca53ee8c4a2dee23acba46c67e5a9f01c5d2eb5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a9bf2e1153a8486acd1ea8e0e528a07059ade17b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5b73920843ce858df6e3b03325d5d1f43cdab3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"894bf60ff5170cf1e4f276a8cedaf8301bceb824","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"ad7f1ee2e67deee0706e0838b5724dd37fc30a34","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"42496c6a32406604178d24685408b77a40adc993","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":499162500000},{"_id":"source/img/20221022.jpg","hash":"437e39a276163f3b3ded1183cb8e3e2301696c19","modified":1700356672000},{"_id":"source/_posts/hexoBuild/image-20231126000012845.png","hash":"2a79551708dc16176113aeed570d44d4dd86d61c","modified":1700928012908},{"_id":"source/img/704733.jpg","hash":"47e4fb575ad80e1e903b9bca71822513c82c2010","modified":1700382468373},{"_id":"source/img/794592.jpg","hash":"cf53de78689b8086cead1d7b75effb9266b949ae","modified":1700382575294},{"_id":"source/img/765121.png","hash":"16fbf535041d7346a07aee50955a794f94679964","modified":1700382913025},{"_id":"source/img/1057805.png","hash":"7e2ee63a584939c816ce7b5317ca8dd12a414049","modified":1700383118863},{"_id":"source/img/1156990.jpg","hash":"f6351f409dc8c7d71061d7cde44c811cb8cec370","modified":1700383073606},{"_id":"public/css/custom.css","hash":"c61fb209e93cca0be8ce23c132ece10a7951fab7","modified":1704515827533},{"_id":"public/js/universe.js","hash":"917e3c2bda5c898f50c9a123d6de9037bd9c9b89","modified":1704515827533},{"_id":"public/css/universe.css","hash":"26c8d58017a9acd930b5dfb3bff8ab0b61b2154a","modified":1704515827533},{"_id":"public/search.xml","hash":"4335e9cdf971ce2a6fb1b1b095a90ff3b5b543a7","modified":1704515827533},{"_id":"public/404.html","hash":"897d24c838878b8259c8c471710b1a3356b9212a","modified":1704515827533},{"_id":"public/categories/index.html","hash":"a1776faf777ab7a9057a40e17e8995d7862fadf7","modified":1704515827533},{"_id":"public/link/index.html","hash":"f7ebc3ce9909a40d0b2280ad009510328e286273","modified":1704515827533},{"_id":"public/music/index.html","hash":"a99ee2b9a9b92b31533f189250150e4ecba9b3b0","modified":1704515827533},{"_id":"public/tags/index.html","hash":"1fb50c07fc3c4035c34cb3938adc6e3bb6e7b8f5","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/index.html","hash":"e0c7439b63e192fd1d59802fe0253c2751ab5d3a","modified":1704515827533},{"_id":"public/2023/12/04/mobileAdaptation/index.html","hash":"155e9d257008f63e1a27df84938996f0d7979f9d","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/index.html","hash":"143b3db66e1f169b9753fd4d5d214b27824efa34","modified":1704515827533},{"_id":"public/2023/11/24/post-test/index.html","hash":"7f0e1e9bfb53a7a36bc3897b814292514d5a577a","modified":1704515827533},{"_id":"public/2023/11/20/test5/index.html","hash":"8d1ed6042299ad3f94a71e4de6f6de0af9999ccb","modified":1704515827533},{"_id":"public/2023/11/20/test4/index.html","hash":"4d4aa50183d5f5adfa3e2dd0188efdc23f16f443","modified":1704515827533},{"_id":"public/2023/11/20/test3/index.html","hash":"5e1287521871d60846184e2fb2aac7959254c5b0","modified":1704515827533},{"_id":"public/2023/11/20/test2/index.html","hash":"11caa752ae4ab72cc9fb080bd00fd021b62bc33f","modified":1704515827533},{"_id":"public/2023/11/20/test1/index.html","hash":"601fd6f8df6fded6ea1b6698af60695b5aa5039a","modified":1704515827533},{"_id":"public/2023/11/20/test1-1/index.html","hash":"91dcc427e92a405fa25c8b144bc1671945584c4a","modified":1704515827533},{"_id":"public/2023/11/20/hello-world/index.html","hash":"c9ced50c71f2659141588dc7b78b386654a22857","modified":1704515827533},{"_id":"public/2023/11/20/css面试题2/index.html","hash":"e9aa0349aa44f59e8c98e3543978798879ce0b31","modified":1704515827533},{"_id":"public/2023/11/20/css面试题/index.html","hash":"c1a681e8e25fc398063affecab1222deb8bb8865","modified":1704515827533},{"_id":"public/archives/index.html","hash":"e782e4076cb45b1f1fb007e8cf65c657acff9054","modified":1704515827533},{"_id":"public/archives/page/2/index.html","hash":"f5bec9e8ec2f78ae42d05cd2cb7e24b957f8740d","modified":1704515827533},{"_id":"public/archives/2023/index.html","hash":"49266aa48e1a1d95f3f7ba53e4f59be80a26c818","modified":1704515827533},{"_id":"public/archives/2023/page/2/index.html","hash":"eacaa8b1619f6c146b26f6f7bf31e0b268bfbc71","modified":1704515827533},{"_id":"public/archives/2023/11/index.html","hash":"c6fdf94371f1ac71c84a4698ed857535f4b8c838","modified":1704515827533},{"_id":"public/archives/2023/11/page/2/index.html","hash":"fb2c0e125a91a56a16b14d2b0924ae615c81b158","modified":1704515827533},{"_id":"public/archives/2023/12/index.html","hash":"2c63adbb8c3b5c016ad4ba8c403e8e84c610b4da","modified":1704515827533},{"_id":"public/archives/2024/index.html","hash":"1ce7dd5e2e77b66131b36a938190591fefeb3e5f","modified":1704515827533},{"_id":"public/archives/2024/01/index.html","hash":"d41e89976dd9a2888156d2c071137b97b4791df0","modified":1704515827533},{"_id":"public/categories/css/index.html","hash":"82dfce7ef4cb87dfa234e29891659f7270d8220a","modified":1704515827533},{"_id":"public/categories/test1/index.html","hash":"f94cf002457fe2c2fa5bd01b7abf94322b3d4128","modified":1704515827533},{"_id":"public/categories/test2/index.html","hash":"26b1c8016a6409b083c9512e52f91dc54eaf6b6e","modified":1704515827533},{"_id":"public/categories/test4/index.html","hash":"b629c6d3a5f334739b1a7ce4e49355f0133da852","modified":1704515827533},{"_id":"public/categories/test3/index.html","hash":"5a3973820744e443580906f5a68e8e56c4f32e61","modified":1704515827533},{"_id":"public/categories/test5/index.html","hash":"81a04d7c04142bd3db6e73714a7a8cf9cc81a584","modified":1704515827533},{"_id":"public/index.html","hash":"fb27c45e86f78939f50c45548d15b2d8fcd3d184","modified":1704515827533},{"_id":"public/page/2/index.html","hash":"0ab285e990b80934441af96eb25eb9c7da58c5f1","modified":1704515827533},{"_id":"public/tags/css/index.html","hash":"ac02b8a53e8ee329404f4b0560047b44f79449b9","modified":1704515827533},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1704515827533},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1704515827533},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231124162529375.png","hash":"bbc3e727cfe7b073fb044b00d111bfb86cc710bb","modified":1704515827533},{"_id":"public/img/favicon.svg","hash":"9865ac5337a7b061a9c06995398722b066ae665c","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/749ce5f439144de7a0b150c889fc3b6fa3c54abd.jpg@1256w_1258h_!web-article-pic.avif","hash":"d60cbb30389f75e00ab550ff68d6a7d645c96a1e","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231124200447068.png","hash":"c01ae283eaf5ca392909146573ffea5e46a0af5c","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/82fa72b4f744b86815471ccc28642835c05613bb.jpg@1256w_1258h_!web-article-pic.avif","hash":"70fab91d39ebc1ae147348f05db3c9bf29918d07","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231124223544444.png","hash":"f92cce51d4805b372130ca652819e7e385d175b0","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231124221147987.png","hash":"3dc1ac787ca4c76d632112d5e61379107c36f297","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231124224809423.png","hash":"78eb95762b62340c6a7e02c51dc23824b2af62ba","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231124225356273.png","hash":"4133eed2af4f2fc482b36c4c7c10e79f38746a51","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231124230353479.png","hash":"dbcf5477dd5de54bc45bed98514db2384fae0bfe","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231125234253370.png","hash":"a4f6029846186465fc3ac1d2193817532dbb6709","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231125234021997.png","hash":"f5126fdfb6bf45aaf04d63ef175e83d29e12c6da","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231125235814852.png","hash":"3e76f5a1c2dd4f2e314ca859404f8b4837f64fb6","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231125235830604.png","hash":"8da02129da0269f029d5d38813482de2f9023035","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231126000522216.png","hash":"8b409df747abe742d1415ee1b0c759fc1b94275f","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231126000721235.png","hash":"0f074640f32f949dc0303250fb892441d9444d96","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/优雅.webp","hash":"cf3633ccbc750eef8ad304f6f8c9bf4bcb7696b0","modified":1704515827533},{"_id":"public/2023/11/24/post-test/1700765478961.png","hash":"9252820e101190cb1b1c535567bb7d1188f78bf9","modified":1704515827533},{"_id":"public/2023/11/24/post-test/1700765121908.png","hash":"9252820e101190cb1b1c535567bb7d1188f78bf9","modified":1704515827533},{"_id":"public/2023/11/24/post-test/1700765616084.png","hash":"fc4777987acb37a5f6551aa3e409409924e99b65","modified":1704515827533},{"_id":"public/2023/11/24/post-test/image-20231124030828678.png","hash":"673bfa1aab8a72910d3e9a74e6bd973acdaf5a66","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044221850475.jpg","hash":"38904ee7df3dc9ea9ca53e12342b619cef813230","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044362771852.jpg","hash":"d69157347c3a9a02574a6e3dc4eca8928bcb28ef","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044380088332.jpg","hash":"c264b842004c30d526d2e9e7e0b1a6f02aae94c6","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044397074751.jpg","hash":"ffd8612d96bc6227ac506cef6bc773d9be7a0ef0","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044389253668.jpg","hash":"5437e5d785a3847e9404f51afdf316c396656e3a","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1704515827533},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1704515827533},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1704515827533},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1704515827533},{"_id":"public/img/avatar.jpg","hash":"5db50e6b88b990204d9711adcb7b4266b2d49df0","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231124202636255.png","hash":"33a2bceb5faae2c135efd70f53023dc34f93afa5","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231125235505317.png","hash":"5cf76d74dc405a2c67f968bd0156646c4c1ab528","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231125235841531.png","hash":"f7ecd5800d4d9e38eaef2986cbb296c72c4e0b9b","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231126001315843.png","hash":"5110cd252280fca2a832b951243a2ba833843540","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231126000829839.png","hash":"b958eb5316e279f4323d00c55109c6bc6b5e55ce","modified":1704515827533},{"_id":"public/2023/12/04/mobileAdaptation/image-20231205143957173.png","hash":"b9fdfa2620a925594a759990c1fc780caf1c26dd","modified":1704515827533},{"_id":"public/2023/11/24/post-test/1700764793648.png","hash":"05d0852fe66e24ed5c8c0c3f2c4618842b1c13ec","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044358678824.jpg","hash":"d758ae55e1d368e285b9ac51bcfcf9c949b0795f","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044359222573.jpg","hash":"cd0b82c78faf75c5ed3d53d950be3674520ee134","modified":1704515827533},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1704515827533},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1704515827533},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1704515827533},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1704515827533},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1704515827533},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1704515827533},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1704515827533},{"_id":"public/css/index.css","hash":"f556908896a1dd507c747259daef14fd268fc8c2","modified":1704515827533},{"_id":"public/js/main.js","hash":"4b4f882a393cbf5b3dfc2b218608a09905f3e3db","modified":1704515827533},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044416300532.jpg","hash":"4b4dbe06db299080ef9d9f3e8662d3c69bf4d5a2","modified":1704515827533},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1704515827533},{"_id":"public/img/1102573.jpg","hash":"3548aff0ff28be8915ed00a843935c0bef22c849","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044360186641.jpg","hash":"69269ef259b6a3e8cc6cb2bdeae6d47f623e47c0","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044362356415.jpg","hash":"d9ac38a75641916ebb7630ab1800a088b878dd8a","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231126000157214.png","hash":"3e8a94c19a4e09128cba62e5ab2e9217ae0bebc9","modified":1704515827533},{"_id":"public/2024/01/05/tinifyTool/17044356164108.jpg","hash":"55d9cc687dbf8d5f04481e7b8c12c7cadfec0a10","modified":1704515827533},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1704515827533},{"_id":"public/img/20221022.jpg","hash":"437e39a276163f3b3ded1183cb8e3e2301696c19","modified":1704515827533},{"_id":"public/2023/11/24/hexoBuild/image-20231126000012845.png","hash":"2a79551708dc16176113aeed570d44d4dd86d61c","modified":1704515827533},{"_id":"public/img/704733.jpg","hash":"47e4fb575ad80e1e903b9bca71822513c82c2010","modified":1704515827533},{"_id":"public/img/794592.jpg","hash":"cf53de78689b8086cead1d7b75effb9266b949ae","modified":1704515827533},{"_id":"public/img/765121.png","hash":"16fbf535041d7346a07aee50955a794f94679964","modified":1704515827533},{"_id":"public/img/1057805.png","hash":"7e2ee63a584939c816ce7b5317ca8dd12a414049","modified":1704515827533},{"_id":"public/img/1156990.jpg","hash":"f6351f409dc8c7d71061d7cde44c811cb8cec370","modified":1704515827533}],"Category":[{"name":"css","_id":"clr1kpsnx0004p0ukgvne1pxq"},{"name":"test1","_id":"clr1kpso8000mp0ukcvkgcdzd"},{"name":"test2","_id":"clr1kpso9000tp0ukbunw0hqq"},{"name":"test4","_id":"clr1kpsoc000zp0uk1y23bm8v"},{"name":"test3","_id":"clr1kpsoe0015p0uk2zma2pqi"},{"name":"test5","_id":"clr1kpsoe0017p0uk7qdda1ri"}],"Data":[{"_id":"link","data":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}],"Page":[{"title":"categories","date":"2023-11-14T10:43:59.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-11-14 18:43:59\ntype: categories\n---\n","updated":"2023-11-19T09:57:52.675Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clr1kpsnr0000p0uk2ghl8zfl","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":""},{"_content":"#footer {\n    background: transparent !important;\n}\n#page-header {\n    background: transparent !important;\n}\n\n/* 白天模式遮罩透明 */\n#footer::before {\n    background: transparent !important;\n}\n#page-header::before {\n    background: transparent !important;\n}\n\n/* 夜间模式遮罩透明 */\n[data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n}\n[data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n}\n\n\n/*分类磁吸*/\n/* 分类磁铁黑夜模式适配 */\n/* 一般状态 */\n[data-theme=\"dark\"] .magnet_link_context {\n    background: #1e1e1e;\n    color: antiquewhite;\n}\n/* 鼠标悬浮状态 */\n[data-theme=\"dark\"] .magnet_link_context:hover {\n    background: #3ecdf1;\n    color: #f2f2f2;\n}\n\n\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n    animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n    animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n    animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n    animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n    0% {\n        text-shadow: #5636ed 0 0 15px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 15px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 15px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 15px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 15px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 15px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 15px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 15px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 15px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 15px;\n    }\n}\n\n@keyframes light_10px {\n    0% {\n        text-shadow: #5636ed 0 0 10px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 10px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 10px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 10px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 10px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 10px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 10px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 10px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 10px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 10px;\n    }\n}\n\n@keyframes light_5px {\n    0% {\n        text-shadow: #5636ed 0 0 5px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 5px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 5px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 15px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 5px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 5px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 5px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 5px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 5px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 5px;\n    }\n}\n","source":"css/custom.css","raw":"#footer {\n    background: transparent !important;\n}\n#page-header {\n    background: transparent !important;\n}\n\n/* 白天模式遮罩透明 */\n#footer::before {\n    background: transparent !important;\n}\n#page-header::before {\n    background: transparent !important;\n}\n\n/* 夜间模式遮罩透明 */\n[data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n}\n[data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n}\n\n\n/*分类磁吸*/\n/* 分类磁铁黑夜模式适配 */\n/* 一般状态 */\n[data-theme=\"dark\"] .magnet_link_context {\n    background: #1e1e1e;\n    color: antiquewhite;\n}\n/* 鼠标悬浮状态 */\n[data-theme=\"dark\"] .magnet_link_context:hover {\n    background: #3ecdf1;\n    color: #f2f2f2;\n}\n\n\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n    animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n    animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n    animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n    animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n    0% {\n        text-shadow: #5636ed 0 0 15px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 15px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 15px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 15px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 15px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 15px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 15px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 15px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 15px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 15px;\n    }\n}\n\n@keyframes light_10px {\n    0% {\n        text-shadow: #5636ed 0 0 10px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 10px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 10px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 10px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 10px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 10px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 10px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 10px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 10px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 10px;\n    }\n}\n\n@keyframes light_5px {\n    0% {\n        text-shadow: #5636ed 0 0 5px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 5px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 5px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 15px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 5px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 5px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 5px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 5px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 5px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 5px;\n    }\n}\n","date":"2023-11-19T16:12:30.463Z","updated":"2023-11-19T16:12:30.463Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"clr1kpsnv0002p0uk9ojsbgmb","content":"#footer {\n    background: transparent !important;\n}\n#page-header {\n    background: transparent !important;\n}\n\n/* 白天模式遮罩透明 */\n#footer::before {\n    background: transparent !important;\n}\n#page-header::before {\n    background: transparent !important;\n}\n\n/* 夜间模式遮罩透明 */\n[data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n}\n[data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n}\n\n\n/*分类磁吸*/\n/* 分类磁铁黑夜模式适配 */\n/* 一般状态 */\n[data-theme=\"dark\"] .magnet_link_context {\n    background: #1e1e1e;\n    color: antiquewhite;\n}\n/* 鼠标悬浮状态 */\n[data-theme=\"dark\"] .magnet_link_context:hover {\n    background: #3ecdf1;\n    color: #f2f2f2;\n}\n\n\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n    animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n    animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n    animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n    animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n    0% {\n        text-shadow: #5636ed 0 0 15px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 15px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 15px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 15px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 15px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 15px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 15px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 15px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 15px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 15px;\n    }\n}\n\n@keyframes light_10px {\n    0% {\n        text-shadow: #5636ed 0 0 10px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 10px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 10px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 10px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 10px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 10px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 10px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 10px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 10px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 10px;\n    }\n}\n\n@keyframes light_5px {\n    0% {\n        text-shadow: #5636ed 0 0 5px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 5px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 5px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 15px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 5px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 5px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 5px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 5px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 5px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 5px;\n    }\n}\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":"#footer {\n    background: transparent !important;\n}\n#page-header {\n    background: transparent !important;\n}\n\n/* 白天模式遮罩透明 */\n#footer::before {\n    background: transparent !important;\n}\n#page-header::before {\n    background: transparent !important;\n}\n\n/* 夜间模式遮罩透明 */\n[data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n}\n[data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n}\n\n\n/*分类磁吸*/\n/* 分类磁铁黑夜模式适配 */\n/* 一般状态 */\n[data-theme=\"dark\"] .magnet_link_context {\n    background: #1e1e1e;\n    color: antiquewhite;\n}\n/* 鼠标悬浮状态 */\n[data-theme=\"dark\"] .magnet_link_context:hover {\n    background: #3ecdf1;\n    color: #f2f2f2;\n}\n\n\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n    animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n    animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n    animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n    animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n    0% {\n        text-shadow: #5636ed 0 0 15px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 15px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 15px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 15px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 15px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 15px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 15px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 15px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 15px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 15px;\n    }\n}\n\n@keyframes light_10px {\n    0% {\n        text-shadow: #5636ed 0 0 10px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 10px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 10px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 10px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 10px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 10px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 10px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 10px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 10px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 10px;\n    }\n}\n\n@keyframes light_5px {\n    0% {\n        text-shadow: #5636ed 0 0 5px;\n    }\n    12.5% {\n        text-shadow: #11ee5e 0 0 5px;\n    }\n    25% {\n        text-shadow: #f14747 0 0 5px;\n    }\n    37.5% {\n        text-shadow: #f1a247 0 0 15px;\n    }\n    50% {\n        text-shadow: #f1ee47 0 0 5px;\n    }\n    50% {\n        text-shadow: #b347f1 0 0 5px;\n    }\n    62.5% {\n        text-shadow: #002afa 0 0 5px;\n    }\n    75% {\n        text-shadow: #ed709b 0 0 5px;\n    }\n    87.5% {\n        text-shadow: #39c5bb 0 0 5px;\n    }\n    100% {\n        text-shadow: #5636ed 0 0 5px;\n    }\n}\n"},{"title":"link","date":"2023-11-14T13:27:19.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-11-14 21:27:19\ntype: \"link\"\n---\n","updated":"2023-11-14T13:28:07.572Z","path":"link/index.html","comments":1,"layout":"page","_id":"clr1kpsny0006p0uk4k8l0jud","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":""},{"_content":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()\n","source":"js/universe.js","raw":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()\n","date":"2023-11-19T16:15:26.901Z","updated":"2023-11-19T16:15:26.901Z","path":"js/universe.js","layout":"false","title":"","comments":1,"_id":"clr1kpso00008p0ukf5i0annk","content":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()\n"},{"_content":"","source":"music/index.md","raw":"","date":"2023-11-14T13:41:49.200Z","updated":"2023-11-14T13:41:49.200Z","path":"music/index.html","title":"","comments":1,"layout":"page","_id":"clr1kpso1000ap0uk9esf1nch","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"tags","date":"2023-11-14T10:43:59.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-11-14 18:43:59\ntype: \"tags\"\n---\n","updated":"2023-11-14T13:33:33.370Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clr1kpso4000fp0uk38go9ydt","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":""},{"_content":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n}\n","source":"css/universe.css","raw":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n}\n","date":"2023-11-19T16:15:26.903Z","updated":"2023-11-19T16:15:26.903Z","path":"css/universe.css","layout":"false","title":"","comments":1,"_id":"clr1kpso6000hp0uk818ng45c","content":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n}\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n}\n"}],"Post":[{"title":"css面试题","cover":"/img/20221022.jpg","top_img":"/img/1057805.png","swiper_index":100,"_content":"## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\n  title ： 鼠标移入到图片显示的值\n  alt   ： 图片无法加载时显示的值\n区别二：\n  在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n\n## BFC\n\nBFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n\n1. 了解BFC ： 块级格式化上下文。\n2. BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。\n3. 如何触发BFC：\n   float的值非none\n   overflow的值非visible\n   display的值为：inline-block、table-cell...\n   position的值为:absoute、fixed\n\n## 清除浮动有哪些方式？\n\n  1. 触发BFC\n  2. 多创建一个盒子，添加样式：clear: both;\n  3. after方式\n    ul:after{\n    ​\t\tcontent: '';\n    ​\t\tdisplay: block;\n    ​\t\tclear: both;\n    }\n\n## ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\n\n<style>\n\ta,button,input,textarea{\n\t\t-webkit-tap-highlight-color: rgba(0,0,0,0);\n\t}\n</style>\n\n## webkit表单输入框placeholder的颜色值能改变吗\n\n<style type=\"text/css\">\n\tinput::-webkit-input-placeholder{\n\t\tcolor:red;\n\t}\n</style>\n\n## 禁止ios长按时触发系统的菜单，禁止ios&android长按时下载图片\n\n```css\nhtml,body{\n\ttouch-callout: none;\n\t-webkit-touch-callout: none;\n\t\n\tuser-select:none;\n\t-webkit-user-select:none;\n}\n```\n\n## 禁止ios和android用户选中文字\n\n```\nhtml,body{\n\tuser-select:none;\n\t-webkit-user-select:none;\n}\n```\n\n## CSS的引入方式有哪些？link和@import的区别是什么？\n\n> CSS有3种引入方式。\n>\n> - 行内式是指将样式写在元素的 style属性内。\n> - 内嵌式是指将样式写在 style元素内。\n> - 外链式是指通过link标签，引入CSS文件内的样式。\n>\n> 通过link标签引入样式与通过@ import方法引入样式有如下区别。\n>\n> （1）加载资源的限制。\n>\n> link是 XHTML的标签，除了加载CSS文件外，还可以加载RSS等其他事务，如加载模板等。\n>\n> @ import只能加载CSS文件。\n>\n> （2）加载方式。\n>\n> 如果用link引用CSS，在页面载入时同时加载，即同步加载。\n>\n> 如果用@ import引用CSS，则需要等到网页完全载入后，再加载CSS文件，即异步加载。\n>\n> （3）兼容性。\n>\n> link是 XHTML的标签，没有兼容问题。\n>\n> @ import是在CSS2.1中提出的，不支持低版本的浏览器。\n>\n> （4）改变样式\n>\n> link的标签是DOM元素，支持使用 JavaScript控制DOM和修改样式；@ import是种方法，不支持控制DOM和修改样式。\n\n## CSS优先级如何排序？\n\n![1693760839916](C:\\Users\\刘好鸭儿廋先生\\AppData\\Roaming\\Typora\\typora-user-images\\1693760839916.png)\n\n## 用CSS画一个三角形\n\n```\nborder-left:100px solid transparent;\nborder-right:100px solid transparent;\nborder-top:100px solid transparent;\nborder-bottom:100px solid #ccc;\n```\n\n","source":"_posts/css面试题.md","raw":"---\ntitle: css面试题\ntags: css\ncategories: css\ncover: '/img/20221022.jpg'\ntop_img: '/img/1057805.png'\nswiper_index: 100 #置顶轮播图顺序，非负整数，数字越大越靠前\n---\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\n  title ： 鼠标移入到图片显示的值\n  alt   ： 图片无法加载时显示的值\n区别二：\n  在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n\n## BFC\n\nBFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n\n1. 了解BFC ： 块级格式化上下文。\n2. BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。\n3. 如何触发BFC：\n   float的值非none\n   overflow的值非visible\n   display的值为：inline-block、table-cell...\n   position的值为:absoute、fixed\n\n## 清除浮动有哪些方式？\n\n  1. 触发BFC\n  2. 多创建一个盒子，添加样式：clear: both;\n  3. after方式\n    ul:after{\n    ​\t\tcontent: '';\n    ​\t\tdisplay: block;\n    ​\t\tclear: both;\n    }\n\n## ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\n\n<style>\n\ta,button,input,textarea{\n\t\t-webkit-tap-highlight-color: rgba(0,0,0,0);\n\t}\n</style>\n\n## webkit表单输入框placeholder的颜色值能改变吗\n\n<style type=\"text/css\">\n\tinput::-webkit-input-placeholder{\n\t\tcolor:red;\n\t}\n</style>\n\n## 禁止ios长按时触发系统的菜单，禁止ios&android长按时下载图片\n\n```css\nhtml,body{\n\ttouch-callout: none;\n\t-webkit-touch-callout: none;\n\t\n\tuser-select:none;\n\t-webkit-user-select:none;\n}\n```\n\n## 禁止ios和android用户选中文字\n\n```\nhtml,body{\n\tuser-select:none;\n\t-webkit-user-select:none;\n}\n```\n\n## CSS的引入方式有哪些？link和@import的区别是什么？\n\n> CSS有3种引入方式。\n>\n> - 行内式是指将样式写在元素的 style属性内。\n> - 内嵌式是指将样式写在 style元素内。\n> - 外链式是指通过link标签，引入CSS文件内的样式。\n>\n> 通过link标签引入样式与通过@ import方法引入样式有如下区别。\n>\n> （1）加载资源的限制。\n>\n> link是 XHTML的标签，除了加载CSS文件外，还可以加载RSS等其他事务，如加载模板等。\n>\n> @ import只能加载CSS文件。\n>\n> （2）加载方式。\n>\n> 如果用link引用CSS，在页面载入时同时加载，即同步加载。\n>\n> 如果用@ import引用CSS，则需要等到网页完全载入后，再加载CSS文件，即异步加载。\n>\n> （3）兼容性。\n>\n> link是 XHTML的标签，没有兼容问题。\n>\n> @ import是在CSS2.1中提出的，不支持低版本的浏览器。\n>\n> （4）改变样式\n>\n> link的标签是DOM元素，支持使用 JavaScript控制DOM和修改样式；@ import是种方法，不支持控制DOM和修改样式。\n\n## CSS优先级如何排序？\n\n![1693760839916](C:\\Users\\刘好鸭儿廋先生\\AppData\\Roaming\\Typora\\typora-user-images\\1693760839916.png)\n\n## 用CSS画一个三角形\n\n```\nborder-left:100px solid transparent;\nborder-right:100px solid transparent;\nborder-top:100px solid transparent;\nborder-bottom:100px solid #ccc;\n```\n\n","slug":"css面试题","published":1,"date":"2023-11-19T16:52:05.984Z","updated":"2023-11-19T16:08:16.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpsnt0001p0uk8flpd5s7","content":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>  title ： 鼠标移入到图片显示的值<br>  alt   ： 图片无法加载时显示的值<br>区别二：<br>  在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n<h2 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h2><p>BFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</p>\n<ol>\n<li>了解BFC ： 块级格式化上下文。</li>\n<li>BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。</li>\n<li>如何触发BFC：<br>float的值非none<br>overflow的值非visible<br>display的值为：inline-block、table-cell…<br>position的值为:absoute、fixed</li>\n</ol>\n<h2 id=\"清除浮动有哪些方式？\"><a href=\"#清除浮动有哪些方式？\" class=\"headerlink\" title=\"清除浮动有哪些方式？\"></a>清除浮动有哪些方式？</h2><ol>\n<li>触发BFC</li>\n<li>多创建一个盒子，添加样式：clear: both;</li>\n<li>after方式<br>ul:after{<br>​\t\tcontent: ‘’;<br>​\t\tdisplay: block;<br>​\t\tclear: both;<br>}</li>\n</ol>\n<h2 id=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"><a href=\"#ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\" class=\"headerlink\" title=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"></a>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h2><style>\n    a,button,input,textarea{\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n    }\n</style>\n\n<h2 id=\"webkit表单输入框placeholder的颜色值能改变吗\"><a href=\"#webkit表单输入框placeholder的颜色值能改变吗\" class=\"headerlink\" title=\"webkit表单输入框placeholder的颜色值能改变吗\"></a>webkit表单输入框placeholder的颜色值能改变吗</h2><style type=\"text/css\">\n    input::-webkit-input-placeholder{\n        color:red;\n    }\n</style>\n\n<h2 id=\"禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片\"><a href=\"#禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片\" class=\"headerlink\" title=\"禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片\"></a>禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">\ttouch-callout: none;</span><br><span class=\"line\">\t-webkit-touch-callout: none;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tuser-select:none;</span><br><span class=\"line\">\t-webkit-user-select:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁止ios和android用户选中文字\"><a href=\"#禁止ios和android用户选中文字\" class=\"headerlink\" title=\"禁止ios和android用户选中文字\"></a>禁止ios和android用户选中文字</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html,body&#123;</span><br><span class=\"line\">\tuser-select:none;</span><br><span class=\"line\">\t-webkit-user-select:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS的引入方式有哪些？link和-import的区别是什么？\"><a href=\"#CSS的引入方式有哪些？link和-import的区别是什么？\" class=\"headerlink\" title=\"CSS的引入方式有哪些？link和@import的区别是什么？\"></a>CSS的引入方式有哪些？link和@import的区别是什么？</h2><blockquote>\n<p>CSS有3种引入方式。</p>\n<ul>\n<li>行内式是指将样式写在元素的 style属性内。</li>\n<li>内嵌式是指将样式写在 style元素内。</li>\n<li>外链式是指通过link标签，引入CSS文件内的样式。</li>\n</ul>\n<p>通过link标签引入样式与通过@ import方法引入样式有如下区别。</p>\n<p>（1）加载资源的限制。</p>\n<p>link是 XHTML的标签，除了加载CSS文件外，还可以加载RSS等其他事务，如加载模板等。</p>\n<p>@ import只能加载CSS文件。</p>\n<p>（2）加载方式。</p>\n<p>如果用link引用CSS，在页面载入时同时加载，即同步加载。</p>\n<p>如果用@ import引用CSS，则需要等到网页完全载入后，再加载CSS文件，即异步加载。</p>\n<p>（3）兼容性。</p>\n<p>link是 XHTML的标签，没有兼容问题。</p>\n<p>@ import是在CSS2.1中提出的，不支持低版本的浏览器。</p>\n<p>（4）改变样式</p>\n<p>link的标签是DOM元素，支持使用 JavaScript控制DOM和修改样式；@ import是种方法，不支持控制DOM和修改样式。</p>\n</blockquote>\n<h2 id=\"CSS优先级如何排序？\"><a href=\"#CSS优先级如何排序？\" class=\"headerlink\" title=\"CSS优先级如何排序？\"></a>CSS优先级如何排序？</h2><p><img src=\"C:\\Users\\刘好鸭儿廋先生\\AppData\\Roaming\\Typora\\typora-user-images\\1693760839916.png\" alt=\"1693760839916\"></p>\n<h2 id=\"用CSS画一个三角形\"><a href=\"#用CSS画一个三角形\" class=\"headerlink\" title=\"用CSS画一个三角形\"></a>用CSS画一个三角形</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-left:100px solid transparent;</span><br><span class=\"line\">border-right:100px solid transparent;</span><br><span class=\"line\">border-top:100px solid transparent;</span><br><span class=\"line\">border-bottom:100px solid #ccc;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>  title ： 鼠标移入到图片显示的值<br>  alt   ： 图片无法加载时显示的值<br>区别二：<br>  在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n<h2 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h2><p>BFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</p>\n<ol>\n<li>了解BFC ： 块级格式化上下文。</li>\n<li>BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。</li>\n<li>如何触发BFC：<br>float的值非none<br>overflow的值非visible<br>display的值为：inline-block、table-cell…<br>position的值为:absoute、fixed</li>\n</ol>\n<h2 id=\"清除浮动有哪些方式？\"><a href=\"#清除浮动有哪些方式？\" class=\"headerlink\" title=\"清除浮动有哪些方式？\"></a>清除浮动有哪些方式？</h2><ol>\n<li>触发BFC</li>\n<li>多创建一个盒子，添加样式：clear: both;</li>\n<li>after方式<br>ul:after{<br>​\t\tcontent: ‘’;<br>​\t\tdisplay: block;<br>​\t\tclear: both;<br>}</li>\n</ol>\n<h2 id=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"><a href=\"#ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\" class=\"headerlink\" title=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"></a>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h2><style>\n    a,button,input,textarea{\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n    }\n</style>\n\n<h2 id=\"webkit表单输入框placeholder的颜色值能改变吗\"><a href=\"#webkit表单输入框placeholder的颜色值能改变吗\" class=\"headerlink\" title=\"webkit表单输入框placeholder的颜色值能改变吗\"></a>webkit表单输入框placeholder的颜色值能改变吗</h2><style type=\"text/css\">\n    input::-webkit-input-placeholder{\n        color:red;\n    }\n</style>\n\n<h2 id=\"禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片\"><a href=\"#禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片\" class=\"headerlink\" title=\"禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片\"></a>禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">\ttouch-callout: none;</span><br><span class=\"line\">\t-webkit-touch-callout: none;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tuser-select:none;</span><br><span class=\"line\">\t-webkit-user-select:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁止ios和android用户选中文字\"><a href=\"#禁止ios和android用户选中文字\" class=\"headerlink\" title=\"禁止ios和android用户选中文字\"></a>禁止ios和android用户选中文字</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html,body&#123;</span><br><span class=\"line\">\tuser-select:none;</span><br><span class=\"line\">\t-webkit-user-select:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS的引入方式有哪些？link和-import的区别是什么？\"><a href=\"#CSS的引入方式有哪些？link和-import的区别是什么？\" class=\"headerlink\" title=\"CSS的引入方式有哪些？link和@import的区别是什么？\"></a>CSS的引入方式有哪些？link和@import的区别是什么？</h2><blockquote>\n<p>CSS有3种引入方式。</p>\n<ul>\n<li>行内式是指将样式写在元素的 style属性内。</li>\n<li>内嵌式是指将样式写在 style元素内。</li>\n<li>外链式是指通过link标签，引入CSS文件内的样式。</li>\n</ul>\n<p>通过link标签引入样式与通过@ import方法引入样式有如下区别。</p>\n<p>（1）加载资源的限制。</p>\n<p>link是 XHTML的标签，除了加载CSS文件外，还可以加载RSS等其他事务，如加载模板等。</p>\n<p>@ import只能加载CSS文件。</p>\n<p>（2）加载方式。</p>\n<p>如果用link引用CSS，在页面载入时同时加载，即同步加载。</p>\n<p>如果用@ import引用CSS，则需要等到网页完全载入后，再加载CSS文件，即异步加载。</p>\n<p>（3）兼容性。</p>\n<p>link是 XHTML的标签，没有兼容问题。</p>\n<p>@ import是在CSS2.1中提出的，不支持低版本的浏览器。</p>\n<p>（4）改变样式</p>\n<p>link的标签是DOM元素，支持使用 JavaScript控制DOM和修改样式；@ import是种方法，不支持控制DOM和修改样式。</p>\n</blockquote>\n<h2 id=\"CSS优先级如何排序？\"><a href=\"#CSS优先级如何排序？\" class=\"headerlink\" title=\"CSS优先级如何排序？\"></a>CSS优先级如何排序？</h2><p><img src=\"C:\\Users\\刘好鸭儿廋先生\\AppData\\Roaming\\Typora\\typora-user-images\\1693760839916.png\" alt=\"1693760839916\"></p>\n<h2 id=\"用CSS画一个三角形\"><a href=\"#用CSS画一个三角形\" class=\"headerlink\" title=\"用CSS画一个三角形\"></a>用CSS画一个三角形</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-left:100px solid transparent;</span><br><span class=\"line\">border-right:100px solid transparent;</span><br><span class=\"line\">border-top:100px solid transparent;</span><br><span class=\"line\">border-bottom:100px solid #ccc;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"css面试题","cover":"/img/1156990.jpg","top_img":"/img/1057805.png","_content":"## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\n  title ： 鼠标移入到图片显示的值\n  alt   ： 图片无法加载时显示的值\n区别二：\n  在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n\n## BFC\n\nBFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n\n1. 了解BFC ： 块级格式化上下文。\n2. BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。\n3. 如何触发BFC：\n   float的值非none\n   overflow的值非visible\n   display的值为：inline-block、table-cell...\n   position的值为:absoute、fixed\n\n## 清除浮动有哪些方式？\n\n  1. 触发BFC\n  2. 多创建一个盒子，添加样式：clear: both;\n  3. after方式\n    ul:after{\n    ​\t\tcontent: '';\n    ​\t\tdisplay: block;\n    ​\t\tclear: both;\n    }\n\n## ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\n\n<style>\n\ta,button,input,textarea{\n\t\t-webkit-tap-highlight-color: rgba(0,0,0,0);\n\t}\n</style>\n\n## webkit表单输入框placeholder的颜色值能改变吗\n\n<style type=\"text/css\">\n\tinput::-webkit-input-placeholder{\n\t\tcolor:red;\n\t}\n</style>\n\n## 禁止ios长按时触发系统的菜单，禁止ios&android长按时下载图片\n\n```css\nhtml,body{\n\ttouch-callout: none;\n\t-webkit-touch-callout: none;\n\t\n\tuser-select:none;\n\t-webkit-user-select:none;\n}\n```\n\n## 禁止ios和android用户选中文字\n\n```\nhtml,body{\n\tuser-select:none;\n\t-webkit-user-select:none;\n}\n```\n\n## CSS的引入方式有哪些？link和@import的区别是什么？\n\n> CSS有3种引入方式。\n>\n> - 行内式是指将样式写在元素的 style属性内。\n> - 内嵌式是指将样式写在 style元素内。\n> - 外链式是指通过link标签，引入CSS文件内的样式。\n>\n> 通过link标签引入样式与通过@ import方法引入样式有如下区别。\n>\n> （1）加载资源的限制。\n>\n> link是 XHTML的标签，除了加载CSS文件外，还可以加载RSS等其他事务，如加载模板等。\n>\n> @ import只能加载CSS文件。\n>\n> （2）加载方式。\n>\n> 如果用link引用CSS，在页面载入时同时加载，即同步加载。\n>\n> 如果用@ import引用CSS，则需要等到网页完全载入后，再加载CSS文件，即异步加载。\n>\n> （3）兼容性。\n>\n> link是 XHTML的标签，没有兼容问题。\n>\n> @ import是在CSS2.1中提出的，不支持低版本的浏览器。\n>\n> （4）改变样式\n>\n> link的标签是DOM元素，支持使用 JavaScript控制DOM和修改样式；@ import是种方法，不支持控制DOM和修改样式。\n\n## CSS优先级如何排序？\n\n![1693760839916](C:\\Users\\刘好鸭儿廋先生\\AppData\\Roaming\\Typora\\typora-user-images\\1693760839916.png)\n\n## 用CSS画一个三角形\n\n```\nborder-left:100px solid transparent;\nborder-right:100px solid transparent;\nborder-top:100px solid transparent;\nborder-bottom:100px solid #ccc;\n```\n\n","source":"_posts/css面试题2.md","raw":"---\ntitle: css面试题\ntags: css\ncategories: css\ncover: '/img/1156990.jpg'\ntop_img: '/img/1057805.png'\n\n---\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\n  title ： 鼠标移入到图片显示的值\n  alt   ： 图片无法加载时显示的值\n区别二：\n  在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n\n## BFC\n\nBFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n\n1. 了解BFC ： 块级格式化上下文。\n2. BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。\n3. 如何触发BFC：\n   float的值非none\n   overflow的值非visible\n   display的值为：inline-block、table-cell...\n   position的值为:absoute、fixed\n\n## 清除浮动有哪些方式？\n\n  1. 触发BFC\n  2. 多创建一个盒子，添加样式：clear: both;\n  3. after方式\n    ul:after{\n    ​\t\tcontent: '';\n    ​\t\tdisplay: block;\n    ​\t\tclear: both;\n    }\n\n## ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\n\n<style>\n\ta,button,input,textarea{\n\t\t-webkit-tap-highlight-color: rgba(0,0,0,0);\n\t}\n</style>\n\n## webkit表单输入框placeholder的颜色值能改变吗\n\n<style type=\"text/css\">\n\tinput::-webkit-input-placeholder{\n\t\tcolor:red;\n\t}\n</style>\n\n## 禁止ios长按时触发系统的菜单，禁止ios&android长按时下载图片\n\n```css\nhtml,body{\n\ttouch-callout: none;\n\t-webkit-touch-callout: none;\n\t\n\tuser-select:none;\n\t-webkit-user-select:none;\n}\n```\n\n## 禁止ios和android用户选中文字\n\n```\nhtml,body{\n\tuser-select:none;\n\t-webkit-user-select:none;\n}\n```\n\n## CSS的引入方式有哪些？link和@import的区别是什么？\n\n> CSS有3种引入方式。\n>\n> - 行内式是指将样式写在元素的 style属性内。\n> - 内嵌式是指将样式写在 style元素内。\n> - 外链式是指通过link标签，引入CSS文件内的样式。\n>\n> 通过link标签引入样式与通过@ import方法引入样式有如下区别。\n>\n> （1）加载资源的限制。\n>\n> link是 XHTML的标签，除了加载CSS文件外，还可以加载RSS等其他事务，如加载模板等。\n>\n> @ import只能加载CSS文件。\n>\n> （2）加载方式。\n>\n> 如果用link引用CSS，在页面载入时同时加载，即同步加载。\n>\n> 如果用@ import引用CSS，则需要等到网页完全载入后，再加载CSS文件，即异步加载。\n>\n> （3）兼容性。\n>\n> link是 XHTML的标签，没有兼容问题。\n>\n> @ import是在CSS2.1中提出的，不支持低版本的浏览器。\n>\n> （4）改变样式\n>\n> link的标签是DOM元素，支持使用 JavaScript控制DOM和修改样式；@ import是种方法，不支持控制DOM和修改样式。\n\n## CSS优先级如何排序？\n\n![1693760839916](C:\\Users\\刘好鸭儿廋先生\\AppData\\Roaming\\Typora\\typora-user-images\\1693760839916.png)\n\n## 用CSS画一个三角形\n\n```\nborder-left:100px solid transparent;\nborder-right:100px solid transparent;\nborder-top:100px solid transparent;\nborder-bottom:100px solid #ccc;\n```\n\n","slug":"css面试题2","published":1,"date":"2023-11-19T16:52:05.986Z","updated":"2023-11-19T10:35:43.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpsnw0003p0uk3qsofgz1","content":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>  title ： 鼠标移入到图片显示的值<br>  alt   ： 图片无法加载时显示的值<br>区别二：<br>  在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n<h2 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h2><p>BFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</p>\n<ol>\n<li>了解BFC ： 块级格式化上下文。</li>\n<li>BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。</li>\n<li>如何触发BFC：<br>float的值非none<br>overflow的值非visible<br>display的值为：inline-block、table-cell…<br>position的值为:absoute、fixed</li>\n</ol>\n<h2 id=\"清除浮动有哪些方式？\"><a href=\"#清除浮动有哪些方式？\" class=\"headerlink\" title=\"清除浮动有哪些方式？\"></a>清除浮动有哪些方式？</h2><ol>\n<li>触发BFC</li>\n<li>多创建一个盒子，添加样式：clear: both;</li>\n<li>after方式<br>ul:after{<br>​\t\tcontent: ‘’;<br>​\t\tdisplay: block;<br>​\t\tclear: both;<br>}</li>\n</ol>\n<h2 id=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"><a href=\"#ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\" class=\"headerlink\" title=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"></a>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h2><style>\n    a,button,input,textarea{\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n    }\n</style>\n\n<h2 id=\"webkit表单输入框placeholder的颜色值能改变吗\"><a href=\"#webkit表单输入框placeholder的颜色值能改变吗\" class=\"headerlink\" title=\"webkit表单输入框placeholder的颜色值能改变吗\"></a>webkit表单输入框placeholder的颜色值能改变吗</h2><style type=\"text/css\">\n    input::-webkit-input-placeholder{\n        color:red;\n    }\n</style>\n\n<h2 id=\"禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片\"><a href=\"#禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片\" class=\"headerlink\" title=\"禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片\"></a>禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">\ttouch-callout: none;</span><br><span class=\"line\">\t-webkit-touch-callout: none;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tuser-select:none;</span><br><span class=\"line\">\t-webkit-user-select:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁止ios和android用户选中文字\"><a href=\"#禁止ios和android用户选中文字\" class=\"headerlink\" title=\"禁止ios和android用户选中文字\"></a>禁止ios和android用户选中文字</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html,body&#123;</span><br><span class=\"line\">\tuser-select:none;</span><br><span class=\"line\">\t-webkit-user-select:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS的引入方式有哪些？link和-import的区别是什么？\"><a href=\"#CSS的引入方式有哪些？link和-import的区别是什么？\" class=\"headerlink\" title=\"CSS的引入方式有哪些？link和@import的区别是什么？\"></a>CSS的引入方式有哪些？link和@import的区别是什么？</h2><blockquote>\n<p>CSS有3种引入方式。</p>\n<ul>\n<li>行内式是指将样式写在元素的 style属性内。</li>\n<li>内嵌式是指将样式写在 style元素内。</li>\n<li>外链式是指通过link标签，引入CSS文件内的样式。</li>\n</ul>\n<p>通过link标签引入样式与通过@ import方法引入样式有如下区别。</p>\n<p>（1）加载资源的限制。</p>\n<p>link是 XHTML的标签，除了加载CSS文件外，还可以加载RSS等其他事务，如加载模板等。</p>\n<p>@ import只能加载CSS文件。</p>\n<p>（2）加载方式。</p>\n<p>如果用link引用CSS，在页面载入时同时加载，即同步加载。</p>\n<p>如果用@ import引用CSS，则需要等到网页完全载入后，再加载CSS文件，即异步加载。</p>\n<p>（3）兼容性。</p>\n<p>link是 XHTML的标签，没有兼容问题。</p>\n<p>@ import是在CSS2.1中提出的，不支持低版本的浏览器。</p>\n<p>（4）改变样式</p>\n<p>link的标签是DOM元素，支持使用 JavaScript控制DOM和修改样式；@ import是种方法，不支持控制DOM和修改样式。</p>\n</blockquote>\n<h2 id=\"CSS优先级如何排序？\"><a href=\"#CSS优先级如何排序？\" class=\"headerlink\" title=\"CSS优先级如何排序？\"></a>CSS优先级如何排序？</h2><p><img src=\"C:\\Users\\刘好鸭儿廋先生\\AppData\\Roaming\\Typora\\typora-user-images\\1693760839916.png\" alt=\"1693760839916\"></p>\n<h2 id=\"用CSS画一个三角形\"><a href=\"#用CSS画一个三角形\" class=\"headerlink\" title=\"用CSS画一个三角形\"></a>用CSS画一个三角形</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-left:100px solid transparent;</span><br><span class=\"line\">border-right:100px solid transparent;</span><br><span class=\"line\">border-top:100px solid transparent;</span><br><span class=\"line\">border-bottom:100px solid #ccc;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>  title ： 鼠标移入到图片显示的值<br>  alt   ： 图片无法加载时显示的值<br>区别二：<br>  在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n<h2 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h2><p>BFC就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</p>\n<ol>\n<li>了解BFC ： 块级格式化上下文。</li>\n<li>BFC的原则：如果一个元素具有BFC，那么内部元素再怎么弄，都不会影响到外面的元素。</li>\n<li>如何触发BFC：<br>float的值非none<br>overflow的值非visible<br>display的值为：inline-block、table-cell…<br>position的值为:absoute、fixed</li>\n</ol>\n<h2 id=\"清除浮动有哪些方式？\"><a href=\"#清除浮动有哪些方式？\" class=\"headerlink\" title=\"清除浮动有哪些方式？\"></a>清除浮动有哪些方式？</h2><ol>\n<li>触发BFC</li>\n<li>多创建一个盒子，添加样式：clear: both;</li>\n<li>after方式<br>ul:after{<br>​\t\tcontent: ‘’;<br>​\t\tdisplay: block;<br>​\t\tclear: both;<br>}</li>\n</ol>\n<h2 id=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"><a href=\"#ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\" class=\"headerlink\" title=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"></a>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h2><style>\n    a,button,input,textarea{\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n    }\n</style>\n\n<h2 id=\"webkit表单输入框placeholder的颜色值能改变吗\"><a href=\"#webkit表单输入框placeholder的颜色值能改变吗\" class=\"headerlink\" title=\"webkit表单输入框placeholder的颜色值能改变吗\"></a>webkit表单输入框placeholder的颜色值能改变吗</h2><style type=\"text/css\">\n    input::-webkit-input-placeholder{\n        color:red;\n    }\n</style>\n\n<h2 id=\"禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片\"><a href=\"#禁止ios长按时触发系统的菜单，禁止ios-android长按时下载图片\" class=\"headerlink\" title=\"禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片\"></a>禁止ios长按时触发系统的菜单，禁止ios&amp;android长按时下载图片</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">\ttouch-callout: none;</span><br><span class=\"line\">\t-webkit-touch-callout: none;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tuser-select:none;</span><br><span class=\"line\">\t-webkit-user-select:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁止ios和android用户选中文字\"><a href=\"#禁止ios和android用户选中文字\" class=\"headerlink\" title=\"禁止ios和android用户选中文字\"></a>禁止ios和android用户选中文字</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html,body&#123;</span><br><span class=\"line\">\tuser-select:none;</span><br><span class=\"line\">\t-webkit-user-select:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS的引入方式有哪些？link和-import的区别是什么？\"><a href=\"#CSS的引入方式有哪些？link和-import的区别是什么？\" class=\"headerlink\" title=\"CSS的引入方式有哪些？link和@import的区别是什么？\"></a>CSS的引入方式有哪些？link和@import的区别是什么？</h2><blockquote>\n<p>CSS有3种引入方式。</p>\n<ul>\n<li>行内式是指将样式写在元素的 style属性内。</li>\n<li>内嵌式是指将样式写在 style元素内。</li>\n<li>外链式是指通过link标签，引入CSS文件内的样式。</li>\n</ul>\n<p>通过link标签引入样式与通过@ import方法引入样式有如下区别。</p>\n<p>（1）加载资源的限制。</p>\n<p>link是 XHTML的标签，除了加载CSS文件外，还可以加载RSS等其他事务，如加载模板等。</p>\n<p>@ import只能加载CSS文件。</p>\n<p>（2）加载方式。</p>\n<p>如果用link引用CSS，在页面载入时同时加载，即同步加载。</p>\n<p>如果用@ import引用CSS，则需要等到网页完全载入后，再加载CSS文件，即异步加载。</p>\n<p>（3）兼容性。</p>\n<p>link是 XHTML的标签，没有兼容问题。</p>\n<p>@ import是在CSS2.1中提出的，不支持低版本的浏览器。</p>\n<p>（4）改变样式</p>\n<p>link的标签是DOM元素，支持使用 JavaScript控制DOM和修改样式；@ import是种方法，不支持控制DOM和修改样式。</p>\n</blockquote>\n<h2 id=\"CSS优先级如何排序？\"><a href=\"#CSS优先级如何排序？\" class=\"headerlink\" title=\"CSS优先级如何排序？\"></a>CSS优先级如何排序？</h2><p><img src=\"C:\\Users\\刘好鸭儿廋先生\\AppData\\Roaming\\Typora\\typora-user-images\\1693760839916.png\" alt=\"1693760839916\"></p>\n<h2 id=\"用CSS画一个三角形\"><a href=\"#用CSS画一个三角形\" class=\"headerlink\" title=\"用CSS画一个三角形\"></a>用CSS画一个三角形</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-left:100px solid transparent;</span><br><span class=\"line\">border-right:100px solid transparent;</span><br><span class=\"line\">border-top:100px solid transparent;</span><br><span class=\"line\">border-bottom:100px solid #ccc;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-11-19T16:52:05.987Z","updated":"1985-10-26T08:15:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpsnz0007p0ukc2hx4rgd","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"hexo博客搭建超详细过程","typora-root-url":"hexoBuild","date":"2023-11-24T08:02:31.000Z","_content":"\n# 写在前面\n\n从我入行以来，一直想搭建一个自己博客来记录自己的想法和遇到的问题。最近失业以后时间多了起来，花了大概一周的时间，把这个博客搭起来了，于是想写一篇文章来记录搭建的详细流程作为本站的一篇文章，这对于我而言也是一个新的开始！\n\n\n\n# 准备\n\n搭建之前，我们需要提前有以下准备：\n\n- 安装了node环境\n- 注册了github账号\n- 安装了git\n- 购买了自己的域名（最好有）\t\n- 安装了markdown编辑器（我使用的是typora）\n\n\n\n# Hexo初体验\n\nHexo是可以一个解析md文件，生成静态网页的博客框架，支持多种主题，而且支持部署到github page。我们先来体验一下。\n\n\n\n在cmd中输入命令全局安装Hexo\n\n```shell\nnpm install -g hexo-cli\n```\n\n安装完成后，输入命令\n\n```shell\nhexo -v\n```\n\n如果跟下图一样出现版本号，表示安装成功。\n\n![image-20231124162529375](./image-20231124162529375.png)\n\n\n\n在我们的工作目录打开cmd，执行`hexo init`创建项目\n\n```shell\nhexo init hexo-blog-demo(项目名)\n```\n\n![image-20231124200447068](./image-20231124200447068.png)\n\n接下来进入到该项目下，较新版本的 hexo 在执行 `hexo init` 时会自行安装好依赖，因此不需要再额外执行`npm i`\n\n```shell\nhexo s\n或者\nhexo serve\n```\n\n打开 http://localhost:4000 后，就会看到你的Hexo博客跑起来了！\n\n> 更多命令可以 [点击查看](https://hexo.io/zh-cn/docs/commands)。\n\n# github page配置\n\nHexo有个命令`hexo g`或者`hexo genarate`，会直接遍历项目中的静态文件来生成静态网页。将这些静态网页挂载到github page就可以直接访问，而不需要另外的服务器了。接下来我们来配置一下。\n\n## 创建仓库\n\n访问github，new 一个 repository。\n\n> 科学上网的重要性，包括后续有可能出现ssh连接超时等问题时，都可以试试挂个代理\n\n注意仓库名一定要是`[用户名].github.io`，一定要这个格式，一定要是这个格式，一定要是这个格式，重要的事情说三遍！\n\n然后仓库一定要是`pubilc`，仓库一定要是`pubilc`，仓库一定要是`pubilc`，这个也说三遍！\n\n![image-20231124202636255](./image-20231124202636255.png)\n\n## 挂载到github page\n\n首先安装 hexo-deployer-git\n\n```shell\nnpm install hexo-deployer-git --save\n```\n\n然后找到项目_config.yml文件，在最下面添加以下代码，代码中的【用户名】填你自己的github用户名\n\n```yaml\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repository: git@github.com:【用户名】/【用户名】.github.io.git\n  branch: main\n```\n\n> 这个文件是Hexo的配置文件，更多详细的配置可以 [点击查看](https://hexo.io/zh-cn/docs/configuration)。\n\n修改保存以后，直接部署到github试一下吧\n\n```shell\nhexo generate // 生成静态文件\nhexo deploy // 部署到github\n```\n\n第二个命令执行完成出现`Deploy done`字样时说明成功了。等待一会，再进入https://【用户名】.github.io就可以看到博客已经挂载成功了。\n\n> 拓展：其实到这会发现，github上管理的是hexo g生成的静态文件，类似dist。而我们hexo init新建的项目没有通过github管理，是手动hexo generate &&  hexo deploy部署上去的。所以我们可以再新建一个项目存放hexo新建的项目，并通过CICD来执行前面的指令，这样就只需要提交代码就能自动生成静态文件并部署到github page。\n\n# Vercel部署\n\nVercel是一个云服务平台，特别适合我们Hexo项目部署，还能提供全球CDN加速。\n\nVercel自带CICD，授权github项目给Vercel后，我们使用`hexo deploy`以后提交到github，Vercel就会帮我们自动部署，操作简单，可谓是非常之优雅。\n\n![优雅](./优雅.webp)\n\n[点击这里进入Vercel](https://vercel.com/)，注册账号并登录。\n\n![image-20231125234021997](./image-20231125234021997.png)\n\n使用github账号关联，在新建项目的时候可以直接托管该github账号的项目。\n\n## 导入项目\n\n接下来创建项目并关联对应的项目，并关联【用户名】.github.io项目\n\n![image-20231125234253370](./image-20231125234253370.png)\n\n\n\n![image-20231125235505317](./image-20231125235505317.png)\n\n![image-20231125235841531](./image-20231125235841531.png)\n\n点击deploy，等待一会，出现下面的界面。\n\n![image-20231126000012845](./image-20231126000012845.png)\n\n## 绑定域名\n\n接下来配置到自己的域名，点击domains配置。\n\n![image-20231126000157214](./image-20231126000157214.png)\n\n输入购买的域名点击add。\n\n![image-20231126000721235](./image-20231126000721235.png)\n\n提示我们在购买域名的云平台去添加解析记录。\n\n![image-20231126000829839](./image-20231126000829839.png)\n\n我使用的是阿里云上购买的域名，接下来进入阿里云的`域名解析`。\n\n![image-20231126001315843](./image-20231126001315843.png)\n\n按照要求vercel上的填写两条记录，填写完成后即可。\n\n> 添加完成以后，可以使用阿里云的dns检测工具，其他的要做的就是等待了。\n\n# butterfly主题应用\n\nHexo默认的样式并不好看，接下来换个主题。我使用的是[butterfly](https://github.com/jerryc127/hexo-theme-butterfly)。更多主题可以[点击查看](https://hexo.io/themes/)。\n\n1.在项目目录执行\n\n```shell\nnpm i hexo-theme-butterfly // butterfly主题\nnpm install hexo-renderer-pug hexo-renderer-stylus --save // butterfly主题需要的依赖包\n```\n\n2.修改`_config.yml`\n\n```yaml\ntheme: butterfly\n```\n\n3.将`node_modules`中的`_config.yml`复制出来到项目的根目录，并重命名为`_config.butterfly.yml`方便后续魔改。`_config.butterfly.yml`生效的优先级会高于`_config.yml`\n\n![image-20231124221147987](./image-20231124221147987.png)\n\n# 额外的插件\n\n应用了一些插件，修改了一些样式和配置，这里就不展开讲啦。\n\nLive2d看板娘：https://github.com/EYHN/hexo-helper-live2d/blob/HEAD/README.zh-CN.md\n\n首页分类：https://zfe.space/post/hexo-magnet.html\n\n首页轮播图：https://github.com/Akilarlxh/hexo-butterfly-swiper\n\n# 写文章\n\n至此，整个博客就完成了，可以写文章了。\n\n文章通过`hexo new`生成\n\n```shell\n$ hexo new [layout] <title>\n```\n\n![image-20231124223544444](./image-20231124223544444.png)\n\n执行命令后会在`source/posts`目录下生成一个单独的md文件。\n\n## Front-matter\n\nFront-matter 是md文件最上方以 `---` 分隔的区域，用于指定个别文件的变量，以下是官网罗列出的参数。\n\n| 参数              | 描述                                                         | 默认值                                                       |\n| :---------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| `layout`          | 布局                                                         | [`config.default_layout`](https://hexo.io/zh-cn/docs/configuration#文章) |\n| `title`           | 标题                                                         | 文章的文件名                                                 |\n| `date`            | 建立日期                                                     | 文件建立日期                                                 |\n| `updated`         | 更新日期                                                     | 文件更新日期                                                 |\n| `comments`        | 开启文章的评论功能                                           | `true`                                                       |\n| `tags`            | 标签（不适用于分页）                                         |                                                              |\n| `categories`      | 分类（不适用于分页）                                         |                                                              |\n| `permalink`       | 覆盖文章的永久链接，永久链接应该以 `/` 或 `.html` 结尾       | `null`                                                       |\n| `excerpt`         | 纯文本的页面摘要。使用 [该插件](https://hexo.io/zh-cn/docs/tag-plugins#文章摘要和截断) 来格式化文本 |                                                              |\n| `disableNunjucks` | 启用时禁用 Nunjucks 标签 `{{ }}`/`{% %}` 和 [标签插件](https://hexo.io/zh-cn/docs/tag-plugins) 的渲染功能 | false                                                        |\n| `lang`            | 设置语言以覆盖 [自动检测](https://hexo.io/zh-cn/docs/internationalization#路径) | 继承自 `_config.yml`                                         |\n| `published`       | 文章是否发布                                                 | 对于 `_posts` 下的文章为 `true`，对于 `_draft` 下的文章为 `false` |\n\n这些参数在不同的主题，有不一样的体现，甚至不同的主题有自己的参数。\n\n## 引入图片\n\nsource目录是存放资源的地方，引用图片也是直接以这个目录作为根目录。我们一般会在source目录下新建一个images目录用于单独存放图片来引用。但是文章内引用的图片很多，归类混乱不易维护。\n\n官方提供了一个方案如下图，算了你还是别看官方解释了，我给你翻译翻译，就是post_asset_folder配置打开以后，新建文章时，会同时在文章的存放目录生成一个同名的文件夹，用来存放资源。\n\n![image-20231124224809423](./image-20231124224809423.png)\n\n咋一看好像没什么用，但是结合typora的话，就有很大的便利了。\n\n我们在_config.yml`文件中修改以下配置\n\n```\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n再在typora中修改图片复制的设置\n\n![image-20231124225356273](./image-20231124225356273.png)\n\n再到`scaffolds`目录下的`post.md`添加一条`Front-matter`。\n\nps：这个`post.md`是创建文章时的模板，写入的内容会出现在每一篇新创建的文章里。\n\n```md\ntypora-root-url: {{ title }}\n```\n\n![image-20231124230353479](./image-20231124230353479.png)\n\n完成这三步后，在用typora写文章时，复制图片（包括截图工具截取、从网页复制或者直接复制本地文件）会直接复制到当前编辑的这个md文件同级的文件夹下，而且也不需要手动修改图片路径就能在网站正常显示，非常之舒服。\n\n# 说在最后\n\n感谢能看到这里，本博客会持续优化，内容也会继续更新。\n","source":"_posts/hexoBuild.md","raw":"---\ntitle: hexo博客搭建超详细过程\ntypora-root-url: hexoBuild\ndate: 2023-11-24 16:02:31\ntags:\n---\n\n# 写在前面\n\n从我入行以来，一直想搭建一个自己博客来记录自己的想法和遇到的问题。最近失业以后时间多了起来，花了大概一周的时间，把这个博客搭起来了，于是想写一篇文章来记录搭建的详细流程作为本站的一篇文章，这对于我而言也是一个新的开始！\n\n\n\n# 准备\n\n搭建之前，我们需要提前有以下准备：\n\n- 安装了node环境\n- 注册了github账号\n- 安装了git\n- 购买了自己的域名（最好有）\t\n- 安装了markdown编辑器（我使用的是typora）\n\n\n\n# Hexo初体验\n\nHexo是可以一个解析md文件，生成静态网页的博客框架，支持多种主题，而且支持部署到github page。我们先来体验一下。\n\n\n\n在cmd中输入命令全局安装Hexo\n\n```shell\nnpm install -g hexo-cli\n```\n\n安装完成后，输入命令\n\n```shell\nhexo -v\n```\n\n如果跟下图一样出现版本号，表示安装成功。\n\n![image-20231124162529375](./image-20231124162529375.png)\n\n\n\n在我们的工作目录打开cmd，执行`hexo init`创建项目\n\n```shell\nhexo init hexo-blog-demo(项目名)\n```\n\n![image-20231124200447068](./image-20231124200447068.png)\n\n接下来进入到该项目下，较新版本的 hexo 在执行 `hexo init` 时会自行安装好依赖，因此不需要再额外执行`npm i`\n\n```shell\nhexo s\n或者\nhexo serve\n```\n\n打开 http://localhost:4000 后，就会看到你的Hexo博客跑起来了！\n\n> 更多命令可以 [点击查看](https://hexo.io/zh-cn/docs/commands)。\n\n# github page配置\n\nHexo有个命令`hexo g`或者`hexo genarate`，会直接遍历项目中的静态文件来生成静态网页。将这些静态网页挂载到github page就可以直接访问，而不需要另外的服务器了。接下来我们来配置一下。\n\n## 创建仓库\n\n访问github，new 一个 repository。\n\n> 科学上网的重要性，包括后续有可能出现ssh连接超时等问题时，都可以试试挂个代理\n\n注意仓库名一定要是`[用户名].github.io`，一定要这个格式，一定要是这个格式，一定要是这个格式，重要的事情说三遍！\n\n然后仓库一定要是`pubilc`，仓库一定要是`pubilc`，仓库一定要是`pubilc`，这个也说三遍！\n\n![image-20231124202636255](./image-20231124202636255.png)\n\n## 挂载到github page\n\n首先安装 hexo-deployer-git\n\n```shell\nnpm install hexo-deployer-git --save\n```\n\n然后找到项目_config.yml文件，在最下面添加以下代码，代码中的【用户名】填你自己的github用户名\n\n```yaml\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repository: git@github.com:【用户名】/【用户名】.github.io.git\n  branch: main\n```\n\n> 这个文件是Hexo的配置文件，更多详细的配置可以 [点击查看](https://hexo.io/zh-cn/docs/configuration)。\n\n修改保存以后，直接部署到github试一下吧\n\n```shell\nhexo generate // 生成静态文件\nhexo deploy // 部署到github\n```\n\n第二个命令执行完成出现`Deploy done`字样时说明成功了。等待一会，再进入https://【用户名】.github.io就可以看到博客已经挂载成功了。\n\n> 拓展：其实到这会发现，github上管理的是hexo g生成的静态文件，类似dist。而我们hexo init新建的项目没有通过github管理，是手动hexo generate &&  hexo deploy部署上去的。所以我们可以再新建一个项目存放hexo新建的项目，并通过CICD来执行前面的指令，这样就只需要提交代码就能自动生成静态文件并部署到github page。\n\n# Vercel部署\n\nVercel是一个云服务平台，特别适合我们Hexo项目部署，还能提供全球CDN加速。\n\nVercel自带CICD，授权github项目给Vercel后，我们使用`hexo deploy`以后提交到github，Vercel就会帮我们自动部署，操作简单，可谓是非常之优雅。\n\n![优雅](./优雅.webp)\n\n[点击这里进入Vercel](https://vercel.com/)，注册账号并登录。\n\n![image-20231125234021997](./image-20231125234021997.png)\n\n使用github账号关联，在新建项目的时候可以直接托管该github账号的项目。\n\n## 导入项目\n\n接下来创建项目并关联对应的项目，并关联【用户名】.github.io项目\n\n![image-20231125234253370](./image-20231125234253370.png)\n\n\n\n![image-20231125235505317](./image-20231125235505317.png)\n\n![image-20231125235841531](./image-20231125235841531.png)\n\n点击deploy，等待一会，出现下面的界面。\n\n![image-20231126000012845](./image-20231126000012845.png)\n\n## 绑定域名\n\n接下来配置到自己的域名，点击domains配置。\n\n![image-20231126000157214](./image-20231126000157214.png)\n\n输入购买的域名点击add。\n\n![image-20231126000721235](./image-20231126000721235.png)\n\n提示我们在购买域名的云平台去添加解析记录。\n\n![image-20231126000829839](./image-20231126000829839.png)\n\n我使用的是阿里云上购买的域名，接下来进入阿里云的`域名解析`。\n\n![image-20231126001315843](./image-20231126001315843.png)\n\n按照要求vercel上的填写两条记录，填写完成后即可。\n\n> 添加完成以后，可以使用阿里云的dns检测工具，其他的要做的就是等待了。\n\n# butterfly主题应用\n\nHexo默认的样式并不好看，接下来换个主题。我使用的是[butterfly](https://github.com/jerryc127/hexo-theme-butterfly)。更多主题可以[点击查看](https://hexo.io/themes/)。\n\n1.在项目目录执行\n\n```shell\nnpm i hexo-theme-butterfly // butterfly主题\nnpm install hexo-renderer-pug hexo-renderer-stylus --save // butterfly主题需要的依赖包\n```\n\n2.修改`_config.yml`\n\n```yaml\ntheme: butterfly\n```\n\n3.将`node_modules`中的`_config.yml`复制出来到项目的根目录，并重命名为`_config.butterfly.yml`方便后续魔改。`_config.butterfly.yml`生效的优先级会高于`_config.yml`\n\n![image-20231124221147987](./image-20231124221147987.png)\n\n# 额外的插件\n\n应用了一些插件，修改了一些样式和配置，这里就不展开讲啦。\n\nLive2d看板娘：https://github.com/EYHN/hexo-helper-live2d/blob/HEAD/README.zh-CN.md\n\n首页分类：https://zfe.space/post/hexo-magnet.html\n\n首页轮播图：https://github.com/Akilarlxh/hexo-butterfly-swiper\n\n# 写文章\n\n至此，整个博客就完成了，可以写文章了。\n\n文章通过`hexo new`生成\n\n```shell\n$ hexo new [layout] <title>\n```\n\n![image-20231124223544444](./image-20231124223544444.png)\n\n执行命令后会在`source/posts`目录下生成一个单独的md文件。\n\n## Front-matter\n\nFront-matter 是md文件最上方以 `---` 分隔的区域，用于指定个别文件的变量，以下是官网罗列出的参数。\n\n| 参数              | 描述                                                         | 默认值                                                       |\n| :---------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| `layout`          | 布局                                                         | [`config.default_layout`](https://hexo.io/zh-cn/docs/configuration#文章) |\n| `title`           | 标题                                                         | 文章的文件名                                                 |\n| `date`            | 建立日期                                                     | 文件建立日期                                                 |\n| `updated`         | 更新日期                                                     | 文件更新日期                                                 |\n| `comments`        | 开启文章的评论功能                                           | `true`                                                       |\n| `tags`            | 标签（不适用于分页）                                         |                                                              |\n| `categories`      | 分类（不适用于分页）                                         |                                                              |\n| `permalink`       | 覆盖文章的永久链接，永久链接应该以 `/` 或 `.html` 结尾       | `null`                                                       |\n| `excerpt`         | 纯文本的页面摘要。使用 [该插件](https://hexo.io/zh-cn/docs/tag-plugins#文章摘要和截断) 来格式化文本 |                                                              |\n| `disableNunjucks` | 启用时禁用 Nunjucks 标签 `{{ }}`/`{% %}` 和 [标签插件](https://hexo.io/zh-cn/docs/tag-plugins) 的渲染功能 | false                                                        |\n| `lang`            | 设置语言以覆盖 [自动检测](https://hexo.io/zh-cn/docs/internationalization#路径) | 继承自 `_config.yml`                                         |\n| `published`       | 文章是否发布                                                 | 对于 `_posts` 下的文章为 `true`，对于 `_draft` 下的文章为 `false` |\n\n这些参数在不同的主题，有不一样的体现，甚至不同的主题有自己的参数。\n\n## 引入图片\n\nsource目录是存放资源的地方，引用图片也是直接以这个目录作为根目录。我们一般会在source目录下新建一个images目录用于单独存放图片来引用。但是文章内引用的图片很多，归类混乱不易维护。\n\n官方提供了一个方案如下图，算了你还是别看官方解释了，我给你翻译翻译，就是post_asset_folder配置打开以后，新建文章时，会同时在文章的存放目录生成一个同名的文件夹，用来存放资源。\n\n![image-20231124224809423](./image-20231124224809423.png)\n\n咋一看好像没什么用，但是结合typora的话，就有很大的便利了。\n\n我们在_config.yml`文件中修改以下配置\n\n```\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n再在typora中修改图片复制的设置\n\n![image-20231124225356273](./image-20231124225356273.png)\n\n再到`scaffolds`目录下的`post.md`添加一条`Front-matter`。\n\nps：这个`post.md`是创建文章时的模板，写入的内容会出现在每一篇新创建的文章里。\n\n```md\ntypora-root-url: {{ title }}\n```\n\n![image-20231124230353479](./image-20231124230353479.png)\n\n完成这三步后，在用typora写文章时，复制图片（包括截图工具截取、从网页复制或者直接复制本地文件）会直接复制到当前编辑的这个md文件同级的文件夹下，而且也不需要手动修改图片路径就能在网站正常显示，非常之舒服。\n\n# 说在最后\n\n感谢能看到这里，本博客会持续优化，内容也会继续更新。\n","slug":"hexoBuild","published":1,"updated":"2023-11-25T17:49:01.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpso00009p0ukd1jb9kyj","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>从我入行以来，一直想搭建一个自己博客来记录自己的想法和遇到的问题。最近失业以后时间多了起来，花了大概一周的时间，把这个博客搭起来了，于是想写一篇文章来记录搭建的详细流程作为本站的一篇文章，这对于我而言也是一个新的开始！</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>搭建之前，我们需要提前有以下准备：</p>\n<ul>\n<li>安装了node环境</li>\n<li>注册了github账号</li>\n<li>安装了git</li>\n<li>购买了自己的域名（最好有）\t</li>\n<li>安装了markdown编辑器（我使用的是typora）</li>\n</ul>\n<h1 id=\"Hexo初体验\"><a href=\"#Hexo初体验\" class=\"headerlink\" title=\"Hexo初体验\"></a>Hexo初体验</h1><p>Hexo是可以一个解析md文件，生成静态网页的博客框架，支持多种主题，而且支持部署到github page。我们先来体验一下。</p>\n<p>在cmd中输入命令全局安装Hexo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，输入命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n\n<p>如果跟下图一样出现版本号，表示安装成功。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124162529375.png\" alt=\"image-20231124162529375\"></p>\n<p>在我们的工作目录打开cmd，执行<code>hexo init</code>创建项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init hexo-blog-demo(项目名)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124200447068.png\" alt=\"image-20231124200447068\"></p>\n<p>接下来进入到该项目下，较新版本的 hexo 在执行 <code>hexo init</code> 时会自行安装好依赖，因此不需要再额外执行<code>npm i</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br><span class=\"line\">或者</span><br><span class=\"line\">hexo serve</span><br></pre></td></tr></table></figure>\n\n<p>打开 <a href=\"http://localhost:4000/\">http://localhost:4000</a> 后，就会看到你的Hexo博客跑起来了！</p>\n<blockquote>\n<p>更多命令可以 <a href=\"https://hexo.io/zh-cn/docs/commands\">点击查看</a>。</p>\n</blockquote>\n<h1 id=\"github-page配置\"><a href=\"#github-page配置\" class=\"headerlink\" title=\"github page配置\"></a>github page配置</h1><p>Hexo有个命令<code>hexo g</code>或者<code>hexo genarate</code>，会直接遍历项目中的静态文件来生成静态网页。将这些静态网页挂载到github page就可以直接访问，而不需要另外的服务器了。接下来我们来配置一下。</p>\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p>访问github，new 一个 repository。</p>\n<blockquote>\n<p>科学上网的重要性，包括后续有可能出现ssh连接超时等问题时，都可以试试挂个代理</p>\n</blockquote>\n<p>注意仓库名一定要是<code>[用户名].github.io</code>，一定要这个格式，一定要是这个格式，一定要是这个格式，重要的事情说三遍！</p>\n<p>然后仓库一定要是<code>pubilc</code>，仓库一定要是<code>pubilc</code>，仓库一定要是<code>pubilc</code>，这个也说三遍！</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124202636255.png\" alt=\"image-20231124202636255\"></p>\n<h2 id=\"挂载到github-page\"><a href=\"#挂载到github-page\" class=\"headerlink\" title=\"挂载到github page\"></a>挂载到github page</h2><p>首先安装 hexo-deployer-git</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>然后找到项目_config.yml文件，在最下面添加以下代码，代码中的【用户名】填你自己的github用户名</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">git@github.com:【用户名】/【用户名】.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个文件是Hexo的配置文件，更多详细的配置可以 <a href=\"https://hexo.io/zh-cn/docs/configuration\">点击查看</a>。</p>\n</blockquote>\n<p>修改保存以后，直接部署到github试一下吧</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate // 生成静态文件</span><br><span class=\"line\">hexo deploy // 部署到github</span><br></pre></td></tr></table></figure>\n\n<p>第二个命令执行完成出现<code>Deploy done</code>字样时说明成功了。等待一会，再进入https:&#x2F;&#x2F;【用户名】.github.io就可以看到博客已经挂载成功了。</p>\n<blockquote>\n<p>拓展：其实到这会发现，github上管理的是hexo g生成的静态文件，类似dist。而我们hexo init新建的项目没有通过github管理，是手动hexo generate &amp;&amp;  hexo deploy部署上去的。所以我们可以再新建一个项目存放hexo新建的项目，并通过CICD来执行前面的指令，这样就只需要提交代码就能自动生成静态文件并部署到github page。</p>\n</blockquote>\n<h1 id=\"Vercel部署\"><a href=\"#Vercel部署\" class=\"headerlink\" title=\"Vercel部署\"></a>Vercel部署</h1><p>Vercel是一个云服务平台，特别适合我们Hexo项目部署，还能提供全球CDN加速。</p>\n<p>Vercel自带CICD，授权github项目给Vercel后，我们使用<code>hexo deploy</code>以后提交到github，Vercel就会帮我们自动部署，操作简单，可谓是非常之优雅。</p>\n<p><img src=\"/2023/11/24/hexoBuild/%E4%BC%98%E9%9B%85.webp\" alt=\"优雅\"></p>\n<p><a href=\"https://vercel.com/\">点击这里进入Vercel</a>，注册账号并登录。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231125234021997.png\" alt=\"image-20231125234021997\"></p>\n<p>使用github账号关联，在新建项目的时候可以直接托管该github账号的项目。</p>\n<h2 id=\"导入项目\"><a href=\"#导入项目\" class=\"headerlink\" title=\"导入项目\"></a>导入项目</h2><p>接下来创建项目并关联对应的项目，并关联【用户名】.github.io项目</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231125234253370.png\" alt=\"image-20231125234253370\"></p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231125235505317.png\" alt=\"image-20231125235505317\"></p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231125235841531.png\" alt=\"image-20231125235841531\"></p>\n<p>点击deploy，等待一会，出现下面的界面。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231126000012845.png\" alt=\"image-20231126000012845\"></p>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><p>接下来配置到自己的域名，点击domains配置。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231126000157214.png\" alt=\"image-20231126000157214\"></p>\n<p>输入购买的域名点击add。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231126000721235.png\" alt=\"image-20231126000721235\"></p>\n<p>提示我们在购买域名的云平台去添加解析记录。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231126000829839.png\" alt=\"image-20231126000829839\"></p>\n<p>我使用的是阿里云上购买的域名，接下来进入阿里云的<code>域名解析</code>。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231126001315843.png\" alt=\"image-20231126001315843\"></p>\n<p>按照要求vercel上的填写两条记录，填写完成后即可。</p>\n<blockquote>\n<p>添加完成以后，可以使用阿里云的dns检测工具，其他的要做的就是等待了。</p>\n</blockquote>\n<h1 id=\"butterfly主题应用\"><a href=\"#butterfly主题应用\" class=\"headerlink\" title=\"butterfly主题应用\"></a>butterfly主题应用</h1><p>Hexo默认的样式并不好看，接下来换个主题。我使用的是<a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">butterfly</a>。更多主题可以<a href=\"https://hexo.io/themes/\">点击查看</a>。</p>\n<p>1.在项目目录执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-theme-butterfly // butterfly主题</span><br><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save // butterfly主题需要的依赖包</span><br></pre></td></tr></table></figure>\n\n<p>2.修改<code>_config.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">butterfly</span></span><br></pre></td></tr></table></figure>\n\n<p>3.将<code>node_modules</code>中的<code>_config.yml</code>复制出来到项目的根目录，并重命名为<code>_config.butterfly.yml</code>方便后续魔改。<code>_config.butterfly.yml</code>生效的优先级会高于<code>_config.yml</code></p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124221147987.png\" alt=\"image-20231124221147987\"></p>\n<h1 id=\"额外的插件\"><a href=\"#额外的插件\" class=\"headerlink\" title=\"额外的插件\"></a>额外的插件</h1><p>应用了一些插件，修改了一些样式和配置，这里就不展开讲啦。</p>\n<p>Live2d看板娘：<a href=\"https://github.com/EYHN/hexo-helper-live2d/blob/HEAD/README.zh-CN.md\">https://github.com/EYHN/hexo-helper-live2d/blob/HEAD/README.zh-CN.md</a></p>\n<p>首页分类：<a href=\"https://zfe.space/post/hexo-magnet.html\">https://zfe.space/post/hexo-magnet.html</a></p>\n<p>首页轮播图：<a href=\"https://github.com/Akilarlxh/hexo-butterfly-swiper\">https://github.com/Akilarlxh/hexo-butterfly-swiper</a></p>\n<h1 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h1><p>至此，整个博客就完成了，可以写文章了。</p>\n<p>文章通过<code>hexo new</code>生成</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo new [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124223544444.png\" alt=\"image-20231124223544444\"></p>\n<p>执行命令后会在<code>source/posts</code>目录下生成一个单独的md文件。</p>\n<h2 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h2><p>Front-matter 是md文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，以下是官网罗列出的参数。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>layout</code></td>\n<td align=\"left\">布局</td>\n<td align=\"left\"><a href=\"https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0\"><code>config.default_layout</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>title</code></td>\n<td align=\"left\">标题</td>\n<td align=\"left\">文章的文件名</td>\n</tr>\n<tr>\n<td align=\"left\"><code>date</code></td>\n<td align=\"left\">建立日期</td>\n<td align=\"left\">文件建立日期</td>\n</tr>\n<tr>\n<td align=\"left\"><code>updated</code></td>\n<td align=\"left\">更新日期</td>\n<td align=\"left\">文件更新日期</td>\n</tr>\n<tr>\n<td align=\"left\"><code>comments</code></td>\n<td align=\"left\">开启文章的评论功能</td>\n<td align=\"left\"><code>true</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>tags</code></td>\n<td align=\"left\">标签（不适用于分页）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>categories</code></td>\n<td align=\"left\">分类（不适用于分页）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>permalink</code></td>\n<td align=\"left\">覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td>\n<td align=\"left\"><code>null</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>excerpt</code></td>\n<td align=\"left\">纯文本的页面摘要。使用 <a href=\"https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD\">该插件</a> 来格式化文本</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>disableNunjucks</code></td>\n<td align=\"left\">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href=\"https://hexo.io/zh-cn/docs/tag-plugins\">标签插件</a> 的渲染功能</td>\n<td align=\"left\">false</td>\n</tr>\n<tr>\n<td align=\"left\"><code>lang</code></td>\n<td align=\"left\">设置语言以覆盖 <a href=\"https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84\">自动检测</a></td>\n<td align=\"left\">继承自 <code>_config.yml</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>published</code></td>\n<td align=\"left\">文章是否发布</td>\n<td align=\"left\">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td>\n</tr>\n</tbody></table>\n<p>这些参数在不同的主题，有不一样的体现，甚至不同的主题有自己的参数。</p>\n<h2 id=\"引入图片\"><a href=\"#引入图片\" class=\"headerlink\" title=\"引入图片\"></a>引入图片</h2><p>source目录是存放资源的地方，引用图片也是直接以这个目录作为根目录。我们一般会在source目录下新建一个images目录用于单独存放图片来引用。但是文章内引用的图片很多，归类混乱不易维护。</p>\n<p>官方提供了一个方案如下图，算了你还是别看官方解释了，我给你翻译翻译，就是post_asset_folder配置打开以后，新建文章时，会同时在文章的存放目录生成一个同名的文件夹，用来存放资源。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124224809423.png\" alt=\"image-20231124224809423\"></p>\n<p>咋一看好像没什么用，但是结合typora的话，就有很大的便利了。</p>\n<p>我们在_config.yml&#96;文件中修改以下配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br><span class=\"line\">marked:</span><br><span class=\"line\">  prependRoot: true</span><br><span class=\"line\">  postAsset: true</span><br></pre></td></tr></table></figure>\n\n<p>再在typora中修改图片复制的设置</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124225356273.png\" alt=\"image-20231124225356273\"></p>\n<p>再到<code>scaffolds</code>目录下的<code>post.md</code>添加一条<code>Front-matter</code>。</p>\n<p>ps：这个<code>post.md</code>是创建文章时的模板，写入的内容会出现在每一篇新创建的文章里。</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typora-root-url: &#123;&#123; title &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124230353479.png\" alt=\"image-20231124230353479\"></p>\n<p>完成这三步后，在用typora写文章时，复制图片（包括截图工具截取、从网页复制或者直接复制本地文件）会直接复制到当前编辑的这个md文件同级的文件夹下，而且也不需要手动修改图片路径就能在网站正常显示，非常之舒服。</p>\n<h1 id=\"说在最后\"><a href=\"#说在最后\" class=\"headerlink\" title=\"说在最后\"></a>说在最后</h1><p>感谢能看到这里，本博客会持续优化，内容也会继续更新。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>从我入行以来，一直想搭建一个自己博客来记录自己的想法和遇到的问题。最近失业以后时间多了起来，花了大概一周的时间，把这个博客搭起来了，于是想写一篇文章来记录搭建的详细流程作为本站的一篇文章，这对于我而言也是一个新的开始！</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>搭建之前，我们需要提前有以下准备：</p>\n<ul>\n<li>安装了node环境</li>\n<li>注册了github账号</li>\n<li>安装了git</li>\n<li>购买了自己的域名（最好有）\t</li>\n<li>安装了markdown编辑器（我使用的是typora）</li>\n</ul>\n<h1 id=\"Hexo初体验\"><a href=\"#Hexo初体验\" class=\"headerlink\" title=\"Hexo初体验\"></a>Hexo初体验</h1><p>Hexo是可以一个解析md文件，生成静态网页的博客框架，支持多种主题，而且支持部署到github page。我们先来体验一下。</p>\n<p>在cmd中输入命令全局安装Hexo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，输入命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n\n<p>如果跟下图一样出现版本号，表示安装成功。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124162529375.png\" alt=\"image-20231124162529375\"></p>\n<p>在我们的工作目录打开cmd，执行<code>hexo init</code>创建项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init hexo-blog-demo(项目名)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124200447068.png\" alt=\"image-20231124200447068\"></p>\n<p>接下来进入到该项目下，较新版本的 hexo 在执行 <code>hexo init</code> 时会自行安装好依赖，因此不需要再额外执行<code>npm i</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br><span class=\"line\">或者</span><br><span class=\"line\">hexo serve</span><br></pre></td></tr></table></figure>\n\n<p>打开 <a href=\"http://localhost:4000/\">http://localhost:4000</a> 后，就会看到你的Hexo博客跑起来了！</p>\n<blockquote>\n<p>更多命令可以 <a href=\"https://hexo.io/zh-cn/docs/commands\">点击查看</a>。</p>\n</blockquote>\n<h1 id=\"github-page配置\"><a href=\"#github-page配置\" class=\"headerlink\" title=\"github page配置\"></a>github page配置</h1><p>Hexo有个命令<code>hexo g</code>或者<code>hexo genarate</code>，会直接遍历项目中的静态文件来生成静态网页。将这些静态网页挂载到github page就可以直接访问，而不需要另外的服务器了。接下来我们来配置一下。</p>\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p>访问github，new 一个 repository。</p>\n<blockquote>\n<p>科学上网的重要性，包括后续有可能出现ssh连接超时等问题时，都可以试试挂个代理</p>\n</blockquote>\n<p>注意仓库名一定要是<code>[用户名].github.io</code>，一定要这个格式，一定要是这个格式，一定要是这个格式，重要的事情说三遍！</p>\n<p>然后仓库一定要是<code>pubilc</code>，仓库一定要是<code>pubilc</code>，仓库一定要是<code>pubilc</code>，这个也说三遍！</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124202636255.png\" alt=\"image-20231124202636255\"></p>\n<h2 id=\"挂载到github-page\"><a href=\"#挂载到github-page\" class=\"headerlink\" title=\"挂载到github page\"></a>挂载到github page</h2><p>首先安装 hexo-deployer-git</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>然后找到项目_config.yml文件，在最下面添加以下代码，代码中的【用户名】填你自己的github用户名</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">git@github.com:【用户名】/【用户名】.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个文件是Hexo的配置文件，更多详细的配置可以 <a href=\"https://hexo.io/zh-cn/docs/configuration\">点击查看</a>。</p>\n</blockquote>\n<p>修改保存以后，直接部署到github试一下吧</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate // 生成静态文件</span><br><span class=\"line\">hexo deploy // 部署到github</span><br></pre></td></tr></table></figure>\n\n<p>第二个命令执行完成出现<code>Deploy done</code>字样时说明成功了。等待一会，再进入https:&#x2F;&#x2F;【用户名】.github.io就可以看到博客已经挂载成功了。</p>\n<blockquote>\n<p>拓展：其实到这会发现，github上管理的是hexo g生成的静态文件，类似dist。而我们hexo init新建的项目没有通过github管理，是手动hexo generate &amp;&amp;  hexo deploy部署上去的。所以我们可以再新建一个项目存放hexo新建的项目，并通过CICD来执行前面的指令，这样就只需要提交代码就能自动生成静态文件并部署到github page。</p>\n</blockquote>\n<h1 id=\"Vercel部署\"><a href=\"#Vercel部署\" class=\"headerlink\" title=\"Vercel部署\"></a>Vercel部署</h1><p>Vercel是一个云服务平台，特别适合我们Hexo项目部署，还能提供全球CDN加速。</p>\n<p>Vercel自带CICD，授权github项目给Vercel后，我们使用<code>hexo deploy</code>以后提交到github，Vercel就会帮我们自动部署，操作简单，可谓是非常之优雅。</p>\n<p><img src=\"/2023/11/24/hexoBuild/%E4%BC%98%E9%9B%85.webp\" alt=\"优雅\"></p>\n<p><a href=\"https://vercel.com/\">点击这里进入Vercel</a>，注册账号并登录。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231125234021997.png\" alt=\"image-20231125234021997\"></p>\n<p>使用github账号关联，在新建项目的时候可以直接托管该github账号的项目。</p>\n<h2 id=\"导入项目\"><a href=\"#导入项目\" class=\"headerlink\" title=\"导入项目\"></a>导入项目</h2><p>接下来创建项目并关联对应的项目，并关联【用户名】.github.io项目</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231125234253370.png\" alt=\"image-20231125234253370\"></p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231125235505317.png\" alt=\"image-20231125235505317\"></p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231125235841531.png\" alt=\"image-20231125235841531\"></p>\n<p>点击deploy，等待一会，出现下面的界面。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231126000012845.png\" alt=\"image-20231126000012845\"></p>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><p>接下来配置到自己的域名，点击domains配置。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231126000157214.png\" alt=\"image-20231126000157214\"></p>\n<p>输入购买的域名点击add。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231126000721235.png\" alt=\"image-20231126000721235\"></p>\n<p>提示我们在购买域名的云平台去添加解析记录。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231126000829839.png\" alt=\"image-20231126000829839\"></p>\n<p>我使用的是阿里云上购买的域名，接下来进入阿里云的<code>域名解析</code>。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231126001315843.png\" alt=\"image-20231126001315843\"></p>\n<p>按照要求vercel上的填写两条记录，填写完成后即可。</p>\n<blockquote>\n<p>添加完成以后，可以使用阿里云的dns检测工具，其他的要做的就是等待了。</p>\n</blockquote>\n<h1 id=\"butterfly主题应用\"><a href=\"#butterfly主题应用\" class=\"headerlink\" title=\"butterfly主题应用\"></a>butterfly主题应用</h1><p>Hexo默认的样式并不好看，接下来换个主题。我使用的是<a href=\"https://github.com/jerryc127/hexo-theme-butterfly\">butterfly</a>。更多主题可以<a href=\"https://hexo.io/themes/\">点击查看</a>。</p>\n<p>1.在项目目录执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-theme-butterfly // butterfly主题</span><br><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save // butterfly主题需要的依赖包</span><br></pre></td></tr></table></figure>\n\n<p>2.修改<code>_config.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">butterfly</span></span><br></pre></td></tr></table></figure>\n\n<p>3.将<code>node_modules</code>中的<code>_config.yml</code>复制出来到项目的根目录，并重命名为<code>_config.butterfly.yml</code>方便后续魔改。<code>_config.butterfly.yml</code>生效的优先级会高于<code>_config.yml</code></p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124221147987.png\" alt=\"image-20231124221147987\"></p>\n<h1 id=\"额外的插件\"><a href=\"#额外的插件\" class=\"headerlink\" title=\"额外的插件\"></a>额外的插件</h1><p>应用了一些插件，修改了一些样式和配置，这里就不展开讲啦。</p>\n<p>Live2d看板娘：<a href=\"https://github.com/EYHN/hexo-helper-live2d/blob/HEAD/README.zh-CN.md\">https://github.com/EYHN/hexo-helper-live2d/blob/HEAD/README.zh-CN.md</a></p>\n<p>首页分类：<a href=\"https://zfe.space/post/hexo-magnet.html\">https://zfe.space/post/hexo-magnet.html</a></p>\n<p>首页轮播图：<a href=\"https://github.com/Akilarlxh/hexo-butterfly-swiper\">https://github.com/Akilarlxh/hexo-butterfly-swiper</a></p>\n<h1 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h1><p>至此，整个博客就完成了，可以写文章了。</p>\n<p>文章通过<code>hexo new</code>生成</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo new [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124223544444.png\" alt=\"image-20231124223544444\"></p>\n<p>执行命令后会在<code>source/posts</code>目录下生成一个单独的md文件。</p>\n<h2 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h2><p>Front-matter 是md文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，以下是官网罗列出的参数。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>layout</code></td>\n<td align=\"left\">布局</td>\n<td align=\"left\"><a href=\"https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0\"><code>config.default_layout</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>title</code></td>\n<td align=\"left\">标题</td>\n<td align=\"left\">文章的文件名</td>\n</tr>\n<tr>\n<td align=\"left\"><code>date</code></td>\n<td align=\"left\">建立日期</td>\n<td align=\"left\">文件建立日期</td>\n</tr>\n<tr>\n<td align=\"left\"><code>updated</code></td>\n<td align=\"left\">更新日期</td>\n<td align=\"left\">文件更新日期</td>\n</tr>\n<tr>\n<td align=\"left\"><code>comments</code></td>\n<td align=\"left\">开启文章的评论功能</td>\n<td align=\"left\"><code>true</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>tags</code></td>\n<td align=\"left\">标签（不适用于分页）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>categories</code></td>\n<td align=\"left\">分类（不适用于分页）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>permalink</code></td>\n<td align=\"left\">覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td>\n<td align=\"left\"><code>null</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>excerpt</code></td>\n<td align=\"left\">纯文本的页面摘要。使用 <a href=\"https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD\">该插件</a> 来格式化文本</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>disableNunjucks</code></td>\n<td align=\"left\">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href=\"https://hexo.io/zh-cn/docs/tag-plugins\">标签插件</a> 的渲染功能</td>\n<td align=\"left\">false</td>\n</tr>\n<tr>\n<td align=\"left\"><code>lang</code></td>\n<td align=\"left\">设置语言以覆盖 <a href=\"https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84\">自动检测</a></td>\n<td align=\"left\">继承自 <code>_config.yml</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>published</code></td>\n<td align=\"left\">文章是否发布</td>\n<td align=\"left\">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td>\n</tr>\n</tbody></table>\n<p>这些参数在不同的主题，有不一样的体现，甚至不同的主题有自己的参数。</p>\n<h2 id=\"引入图片\"><a href=\"#引入图片\" class=\"headerlink\" title=\"引入图片\"></a>引入图片</h2><p>source目录是存放资源的地方，引用图片也是直接以这个目录作为根目录。我们一般会在source目录下新建一个images目录用于单独存放图片来引用。但是文章内引用的图片很多，归类混乱不易维护。</p>\n<p>官方提供了一个方案如下图，算了你还是别看官方解释了，我给你翻译翻译，就是post_asset_folder配置打开以后，新建文章时，会同时在文章的存放目录生成一个同名的文件夹，用来存放资源。</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124224809423.png\" alt=\"image-20231124224809423\"></p>\n<p>咋一看好像没什么用，但是结合typora的话，就有很大的便利了。</p>\n<p>我们在_config.yml&#96;文件中修改以下配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br><span class=\"line\">marked:</span><br><span class=\"line\">  prependRoot: true</span><br><span class=\"line\">  postAsset: true</span><br></pre></td></tr></table></figure>\n\n<p>再在typora中修改图片复制的设置</p>\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124225356273.png\" alt=\"image-20231124225356273\"></p>\n<p>再到<code>scaffolds</code>目录下的<code>post.md</code>添加一条<code>Front-matter</code>。</p>\n<p>ps：这个<code>post.md</code>是创建文章时的模板，写入的内容会出现在每一篇新创建的文章里。</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typora-root-url: &#123;&#123; title &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/24/hexoBuild/image-20231124230353479.png\" alt=\"image-20231124230353479\"></p>\n<p>完成这三步后，在用typora写文章时，复制图片（包括截图工具截取、从网页复制或者直接复制本地文件）会直接复制到当前编辑的这个md文件同级的文件夹下，而且也不需要手动修改图片路径就能在网站正常显示，非常之舒服。</p>\n<h1 id=\"说在最后\"><a href=\"#说在最后\" class=\"headerlink\" title=\"说在最后\"></a>说在最后</h1><p>感谢能看到这里，本博客会持续优化，内容也会继续更新。</p>\n"},{"title":"mobileAdaptation","typora-root-url":"mobileAdaptation","date":"2023-12-04T11:05:51.000Z","_content":"\n# 写在前面\n\n\n\n# 概念\n\n\n\n\n\n\n\n![image-20231205143957173](./image-20231205143957173.png)\n","source":"_posts/mobileAdaptation.md","raw":"---\ntitle: mobileAdaptation\ntypora-root-url: mobileAdaptation\ndate: 2023-12-04 19:05:51\ntags:\n---\n\n# 写在前面\n\n\n\n# 概念\n\n\n\n\n\n\n\n![image-20231205143957173](./image-20231205143957173.png)\n","slug":"mobileAdaptation","published":1,"updated":"2023-12-05T20:12:37.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpso1000bp0ukhzz98ppx","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p><img src=\"/2023/12/04/mobileAdaptation/image-20231205143957173.png\" alt=\"image-20231205143957173\"></p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p><img src=\"/2023/12/04/mobileAdaptation/image-20231205143957173.png\" alt=\"image-20231205143957173\"></p>\n"},{"layout":"posts","title":"post_test","date":"2023-11-23T17:46:15.000Z","typora-root-url":"post-test/","_content":"\n![image-20231124030828678](./image-20231124030828678.png)\n","source":"_posts/post-test.md","raw":"---\nlayout: posts\ntitle: post_test\ndate: 2023-11-24 01:46:15\ntags:\ntypora-root-url: post-test/\n---\n\n![image-20231124030828678](./image-20231124030828678.png)\n","slug":"post-test","published":1,"updated":"2023-11-23T19:08:34.236Z","comments":1,"photos":[],"link":"","_id":"clr1kpso4000gp0ukae5587o9","content":"<p><img src=\"/2023/11/24/post-test/image-20231124030828678.png\" alt=\"image-20231124030828678\"></p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":"<p><img src=\"/2023/11/24/post-test/image-20231124030828678.png\" alt=\"image-20231124030828678\"></p>\n"},{"title":"test1-1","cover":"/img/1156990.jpg","top_img":"/img/1057805.png","_content":"\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","source":"_posts/test1-1.md","raw":"---\ntitle: test1-1\ntags: css\ncategories: test1\ncover: '/img/1156990.jpg'\ntop_img: '/img/1057805.png'\n---\n\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","slug":"test1-1","published":1,"date":"2023-11-19T16:52:05.988Z","updated":"2023-11-19T16:04:39.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpso6000ip0uk5p8a74ox","content":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n"},{"title":"test1","cover":"/img/1156990.jpg","top_img":"/img/1057805.png","_content":"\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","source":"_posts/test1.md","raw":"---\ntitle: test1\ntags: css\ncategories: test1\ncover: '/img/1156990.jpg'\ntop_img: '/img/1057805.png'\n---\n\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","slug":"test1","published":1,"date":"2023-11-19T16:52:05.990Z","updated":"2023-11-19T16:04:39.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpso7000lp0ukfvc4d3o0","content":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n"},{"title":"test2","cover":"/img/1156990.jpg","top_img":"/img/1057805.png","swiper_index":60,"_content":"\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","source":"_posts/test2.md","raw":"---\ntitle: test2\ntags: css\ncategories: test2\ncover: '/img/1156990.jpg'\ntop_img: '/img/1057805.png'\nswiper_index: 60 #置顶轮播图顺序，非负整数，数字越大越靠前\n---\n\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","slug":"test2","published":1,"date":"2023-11-19T16:52:05.991Z","updated":"2023-11-19T16:08:16.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpso8000op0ukhgc5cjds","content":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n"},{"title":"test2","cover":"/img/1156990.jpg","top_img":"/img/1057805.png","swiper_index":58,"_content":"\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","source":"_posts/test3.md","raw":"---\ntitle: test2\ntags: css\ncategories: test4\ncover: '/img/1156990.jpg'\ntop_img: '/img/1057805.png'\nswiper_index: 58 #置顶轮播图顺序，非负整数，数字越大越靠前\n---\n\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","slug":"test3","published":1,"date":"2023-11-19T16:52:05.993Z","updated":"2023-11-19T16:08:23.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpsob000xp0uk5tnqex0k","content":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n"},{"title":"test2","cover":"/img/1156990.jpg","top_img":"/img/1057805.png","swiper_index":56,"_content":"\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","source":"_posts/test4.md","raw":"---\ntitle: test2\ntags: css\ncategories: test3\ncover: '/img/1156990.jpg'\ntop_img: '/img/1057805.png'\nswiper_index: 56 #置顶轮播图顺序，非负整数，数字越大越靠前\n---\n\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","slug":"test4","published":1,"date":"2023-11-19T16:52:05.994Z","updated":"2023-11-19T16:08:30.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpsoc000yp0uk3zp5d3ss","content":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n"},{"title":"test2","cover":"/img/1156990.jpg","top_img":"/img/1057805.png","_content":"\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","source":"_posts/test5.md","raw":"---\ntitle: test2\ntags: css\ncategories: test5\ncover: '/img/1156990.jpg'\ntop_img: '/img/1057805.png'\n---\n\n## 介绍一下CSS的盒子模型\n\n> CSS的盒子模型有哪些：标准盒子模型、IE盒子模型\n> CSS的盒子模型区别：\n>   标准盒子模型：margin、border、padding、content\n>   IE盒子模型 ：margin、content（ border +  padding  + content ）\n> 通过CSS如何转换盒子模型：\n>   box-sizing: content-box;  /*标准盒子模型*/\n>   box-sizing: border-box;   /*IE盒子模型*/\n\n## img标签的title和alt有什么区别？\n\n区别一：\ntitle ： 鼠标移入到图片显示的值\nalt   ： 图片无法加载时显示的值\n区别二：\n在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。\n\n## 图片格式\n\npng:无损压缩，尺寸体积要比jpg/jpeg的大，适合做小图标。\njpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。\ngif:一般是做动图的。\nwebp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。\n\napng: 可以替代gif，向下兼容。\n","slug":"test5","published":1,"date":"2023-11-19T16:52:05.995Z","updated":"2023-11-19T16:04:39.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpsod0011p0ukbddk8vn6","content":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"介绍一下CSS的盒子模型\"><a href=\"#介绍一下CSS的盒子模型\" class=\"headerlink\" title=\"介绍一下CSS的盒子模型\"></a>介绍一下CSS的盒子模型</h2><blockquote>\n<p>CSS的盒子模型有哪些：标准盒子模型、IE盒子模型<br>CSS的盒子模型区别：<br>  标准盒子模型：margin、border、padding、content<br>  IE盒子模型 ：margin、content（ border +  padding  + content ）<br>通过CSS如何转换盒子模型：<br>  box-sizing: content-box;  &#x2F;<em>标准盒子模型</em>&#x2F;<br>  box-sizing: border-box;   &#x2F;<em>IE盒子模型</em>&#x2F;</p>\n</blockquote>\n<h2 id=\"img标签的title和alt有什么区别？\"><a href=\"#img标签的title和alt有什么区别？\" class=\"headerlink\" title=\"img标签的title和alt有什么区别？\"></a>img标签的title和alt有什么区别？</h2><p>区别一：<br>title ： 鼠标移入到图片显示的值<br>alt   ： 图片无法加载时显示的值<br>区别二：<br>在seo的层面上，爬虫抓取不到图片的内容，所以前端在写img标签的时候为了增加seo效果要加入alt属性来描述这张图是什么内容或者关键词。</p>\n<h2 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h2><p>png:无损压缩，尺寸体积要比jpg&#x2F;jpeg的大，适合做小图标。<br>jpg:采用压缩算法，有一点失真，比png体积要小，适合做中大图片。<br>gif:一般是做动图的。<br>webp：同时支持有损或者无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是特别好。</p>\n<p>apng: 可以替代gif，向下兼容。</p>\n"},{"title":"vue3项目图片压缩脚本工具","typora-root-url":"tinifyTool","date":"2024-01-05T02:34:58.000Z","_content":"\n# 写在前面\n图片加载时间是首屏体验中很重要的部分，谁会想访问一个一直在处加载状态的网站呢？所以需要图片尽可能的小来减少加载时间。\n\n一方面，我们日常使用的图片一般是jpg、png格式，我们可以采用一些压缩更好图片格式（例如svg、webp、avif、apng，还有未来可期的heif、jpeg-xl）；\n\n另一方面就是直接压缩图片了，[tinypng](https://tinypng.com/) 是一个在线压缩图片的网站，支持手动拖拽。但是如果压缩的图片多拖来拖去就很麻烦。\n\n所以写了个脚本工具解放双手，将在vue3项目中使用。\n\n# 准备\n1. vue3项目\n2. node 16+环境 （或者nvm）\n3. 一个有图片的文件夹\n\n# tinyPng API\n首先获取tinypng的api key -> [点击访问tinypng](https://tinypng.com/)\n![](./17044356164108.jpg)\n\n输入邮箱，会收到一封带链接的邮件，像下面这样。点击`Log in with magic link`按钮。\n![](./17044359222573.jpg)\n进入开发控制台\n![](./17044362771852.jpg)\n激活api key，并复制这个api key（就是我打码的这个）。\n![](./17044362356415.jpg)\n\n> 这里也可以看到，tinyPng提供了每月500张的免费压缩，超过就要收费了。\n\n\n# 安装依赖\n```shell\nnpm i tinify -D // tinypng官方的包 https://tinypng.com/developers/reference/nodejs\nnpm i ora -D    // 命令行loading（为了好看）\nnpm i picocolors -D // 命令行带颜色的文字（为了好看）\n```\n全部包都装到devDependencies了，因为咱们只会在开发环境去压缩图片，并不想徒增打包后的体积。\n\n# 新建tinify.mjs文件\nsrc下新建目录tools，新建一个名为tinify.mjs的文件，是mjs哦，不是js。\n> mjs后缀文件是使用es module规范的js文件，而普通的js后缀使用的是commonjs module规范。\n\ntinify.mjs:\n```javascript\nimport tinify from 'tinify';\nimport * as fs from 'fs/promises';\nimport pc from \"picocolors\";\nimport ora from 'ora';   // 使用了Intl.Segmenter，需要node 16+\nconst spinner = ora('Loading');\n\ntinify.key = ‘【你的api key】’\nconst IMAGE_SOURCE_ROOT = 'src/assets/romimg/activity/2023/christmas';\n\nconst minify = async () => {\n    // 1.读取当前目录下文件\n    spinner.start(pc.cyan('Reading images...'));\n    let files = await fs.readdir(IMAGE_SOURCE_ROOT);\n\n    // 2.压缩其中的图片\n    spinner.text = pc.cyan('Compressing images...');\n    files = files.filter(fileName => /\\.(jpg|jpeg|png)$/gi.test(fileName));\n    const compressedImages = await Promise.all(files.map(async (fileName) => {\n        const filePath = `${IMAGE_SOURCE_ROOT}/${fileName}`;\n        await tinify.fromFile(filePath).toFile(filePath);\n        return fileName;\n    }))\n\n    spinner.info('The following images are compressed:');\n    const tabSpace = '    ';\n    console.log(tabSpace + pc.blue(compressedImages.join(`\\n${tabSpace}`)));\n    spinner.succeed(pc.green('Minify finished!'));\n    spinner.stop();\n}\n\nminify().then();\n\n```\n注意配置`tinify.key` 和 `IMAGE_SOURCE_ROOT`，`tinify.key`是上一步获取的api key，`IMAGE_SOURCE_ROOT`是需要压缩的图片目录，比如我的是 'src/assets/romimg/activity/2023/christmas'。\n\n# 配置package.json\n在`script`中新增一条指令。\n```\n\"tiny\": \"node src/tools/tinify.mjs\",\n```\n![](./17044380088332.jpg)\n\n配置完成后，可以在`package.json`同级目录下执行 \n```shell\nnpm run tinify\n```\n执行结果：\n![](./17044389253668.jpg)\nok，有loading，有颜色的字看着也挺美观。\n\n# 使用.local中的环境变量\n前面说了，每个接口每月只能压缩500张图片。公司愿意为其付费当然是极好的，大家共用一个key。但如果公司不愿意呢？每个开发者使用自己的api key，这个时候就可以用到`.local`后缀的环境变量文件了。\n\n## vite中的环境变量\nvite本身支持不同环境（开发环境、生产环境）的环境变量，通过指令中的--mode指定是哪个环境，vite还使用了`dotenv`将对应的环境变量文件中的变量合并到了import.meta.env对象中，供客户端访问。贴一张vite中文官网的截图。[点击访问原链接](https://vitejs.cn/vite3-cn/guide/env-and-mode.html#env-files)。\n![](./17044416300532.jpg)\n除此之外，还推荐在git中忽略掉`.local`后缀的环境变量文件，可以让每个人维护各自在`.env.*.local`中各自的环境变量。\n![](./17044397074751.jpg)\n\n## 定义.local中的变量\n以此基础上，我们直接把`api key`和`IMAGE_SOURCE_ROOT`放到`.env.*.local`文件里。\n.env.development.local：\n\n```\nVITE_TINIFY_API_KEY=【你的api key】\nVITE_TINIFY_DIR=src/assets/romimg/activity/2023/christmas\n```\n> 因为我的dev指令是\"vite --mode development.local\",所以我的变量加在`.env.development.local`文件中。\n> 如果你的指令中的--mode是development，那就把它改成development.local并新建'.env.development.local'文件。\n> （当然环境的名字是自定义的，我的叫development环境，兴许你的叫dev环境，不要太死板）\n\n## 使用dotenv\n前面也说到，vite也是用了dotenv。那我们也来装个`dotenv`。dotenv 是用来获取换取环境变量的，将环境变量的值直接合并到`process.env`对象中。\n```shell\nnpm i dotenv -D\n```\n\ntinify.mjs中：\n```javascript\n...\n\n// 修改前\ntinify.key = ‘【你的api key】’\nconst IMAGE_SOURCE_ROOT = 'src/assets/romimg/activity/2023/christmas';\n\n// 修改后：\nimport 'dotenv/config';\ntinify.key = process.env.VITE_TINIFY_API_KEY || '【你的api key】';\nconst IMAGE_SOURCE_ROOT = process.env.VITE_TINIFY_DIR || 'src/assets/romimg/activity/2023/christmas';\n\n...\n\n```\n\n## 修改package.json\n然后在指令中，指定使用哪个环境变量文件。\npackage.json：\n```json\n...\n\n// 修改前\n\"tiny\": \"node src/tools/tinify.mjs\",\n\n// 修改后\n\"tiny\": \"node src/tools/tinify.mjs dotenv_config_path=.env.development.local\",\n\n...\n\n```\n\n# 写在最后\n这样就完成了！最后贴一下完整的`tinify.mjs`\n```javascript\nimport tinify from 'tinify';\nimport * as fs from 'fs/promises';\nimport pc from \"picocolors\";\nimport ora from 'ora';   // 使用了Intl.Segmenter，需要node 16+\nconst spinner = ora('Loading');\n\nimport 'dotenv/config';\ntinify.key = process.env.VITE_TINIFY_API_KEY || '【你的api key】';\nconst IMAGE_SOURCE_ROOT = process.env.VITE_TINIFY_DIR || 'src/assets/romimg/activity/2023/christmas';\n\nconst minify = async () => {\n    // 1.读取当前目录下文件\n    spinner.start(pc.cyan('Reading images...'));\n    let files = await fs.readdir(IMAGE_SOURCE_ROOT);\n\n    // 2.压缩其中的图片\n    spinner.text = pc.cyan('Compressing images...');\n    files = files.filter(fileName => /\\.(jpg|jpeg|png)$/gi.test(fileName));\n    const compressedImages = await Promise.all(files.map(async (fileName) => {\n        const filePath = `${IMAGE_SOURCE_ROOT}/${fileName}`;\n        await tinify.fromFile(filePath).toFile(filePath);\n        return fileName;\n    }))\n\n    spinner.info('The following images are compressed:');\n    const tabSpace = '    ';\n    console.log(tabSpace + pc.blue(compressedImages.join(`\\n${tabSpace}`)));\n    spinner.succeed(pc.green('Minify finished!'));\n    spinner.stop();\n}\n\nminify().then();\n```\n","source":"_posts/tinifyTool.md","raw":"---\ntitle: vue3项目图片压缩脚本工具\ntypora-root-url: tinifyTool\ndate: 2024-01-05 10:34:58\ntags:\n---\n\n# 写在前面\n图片加载时间是首屏体验中很重要的部分，谁会想访问一个一直在处加载状态的网站呢？所以需要图片尽可能的小来减少加载时间。\n\n一方面，我们日常使用的图片一般是jpg、png格式，我们可以采用一些压缩更好图片格式（例如svg、webp、avif、apng，还有未来可期的heif、jpeg-xl）；\n\n另一方面就是直接压缩图片了，[tinypng](https://tinypng.com/) 是一个在线压缩图片的网站，支持手动拖拽。但是如果压缩的图片多拖来拖去就很麻烦。\n\n所以写了个脚本工具解放双手，将在vue3项目中使用。\n\n# 准备\n1. vue3项目\n2. node 16+环境 （或者nvm）\n3. 一个有图片的文件夹\n\n# tinyPng API\n首先获取tinypng的api key -> [点击访问tinypng](https://tinypng.com/)\n![](./17044356164108.jpg)\n\n输入邮箱，会收到一封带链接的邮件，像下面这样。点击`Log in with magic link`按钮。\n![](./17044359222573.jpg)\n进入开发控制台\n![](./17044362771852.jpg)\n激活api key，并复制这个api key（就是我打码的这个）。\n![](./17044362356415.jpg)\n\n> 这里也可以看到，tinyPng提供了每月500张的免费压缩，超过就要收费了。\n\n\n# 安装依赖\n```shell\nnpm i tinify -D // tinypng官方的包 https://tinypng.com/developers/reference/nodejs\nnpm i ora -D    // 命令行loading（为了好看）\nnpm i picocolors -D // 命令行带颜色的文字（为了好看）\n```\n全部包都装到devDependencies了，因为咱们只会在开发环境去压缩图片，并不想徒增打包后的体积。\n\n# 新建tinify.mjs文件\nsrc下新建目录tools，新建一个名为tinify.mjs的文件，是mjs哦，不是js。\n> mjs后缀文件是使用es module规范的js文件，而普通的js后缀使用的是commonjs module规范。\n\ntinify.mjs:\n```javascript\nimport tinify from 'tinify';\nimport * as fs from 'fs/promises';\nimport pc from \"picocolors\";\nimport ora from 'ora';   // 使用了Intl.Segmenter，需要node 16+\nconst spinner = ora('Loading');\n\ntinify.key = ‘【你的api key】’\nconst IMAGE_SOURCE_ROOT = 'src/assets/romimg/activity/2023/christmas';\n\nconst minify = async () => {\n    // 1.读取当前目录下文件\n    spinner.start(pc.cyan('Reading images...'));\n    let files = await fs.readdir(IMAGE_SOURCE_ROOT);\n\n    // 2.压缩其中的图片\n    spinner.text = pc.cyan('Compressing images...');\n    files = files.filter(fileName => /\\.(jpg|jpeg|png)$/gi.test(fileName));\n    const compressedImages = await Promise.all(files.map(async (fileName) => {\n        const filePath = `${IMAGE_SOURCE_ROOT}/${fileName}`;\n        await tinify.fromFile(filePath).toFile(filePath);\n        return fileName;\n    }))\n\n    spinner.info('The following images are compressed:');\n    const tabSpace = '    ';\n    console.log(tabSpace + pc.blue(compressedImages.join(`\\n${tabSpace}`)));\n    spinner.succeed(pc.green('Minify finished!'));\n    spinner.stop();\n}\n\nminify().then();\n\n```\n注意配置`tinify.key` 和 `IMAGE_SOURCE_ROOT`，`tinify.key`是上一步获取的api key，`IMAGE_SOURCE_ROOT`是需要压缩的图片目录，比如我的是 'src/assets/romimg/activity/2023/christmas'。\n\n# 配置package.json\n在`script`中新增一条指令。\n```\n\"tiny\": \"node src/tools/tinify.mjs\",\n```\n![](./17044380088332.jpg)\n\n配置完成后，可以在`package.json`同级目录下执行 \n```shell\nnpm run tinify\n```\n执行结果：\n![](./17044389253668.jpg)\nok，有loading，有颜色的字看着也挺美观。\n\n# 使用.local中的环境变量\n前面说了，每个接口每月只能压缩500张图片。公司愿意为其付费当然是极好的，大家共用一个key。但如果公司不愿意呢？每个开发者使用自己的api key，这个时候就可以用到`.local`后缀的环境变量文件了。\n\n## vite中的环境变量\nvite本身支持不同环境（开发环境、生产环境）的环境变量，通过指令中的--mode指定是哪个环境，vite还使用了`dotenv`将对应的环境变量文件中的变量合并到了import.meta.env对象中，供客户端访问。贴一张vite中文官网的截图。[点击访问原链接](https://vitejs.cn/vite3-cn/guide/env-and-mode.html#env-files)。\n![](./17044416300532.jpg)\n除此之外，还推荐在git中忽略掉`.local`后缀的环境变量文件，可以让每个人维护各自在`.env.*.local`中各自的环境变量。\n![](./17044397074751.jpg)\n\n## 定义.local中的变量\n以此基础上，我们直接把`api key`和`IMAGE_SOURCE_ROOT`放到`.env.*.local`文件里。\n.env.development.local：\n\n```\nVITE_TINIFY_API_KEY=【你的api key】\nVITE_TINIFY_DIR=src/assets/romimg/activity/2023/christmas\n```\n> 因为我的dev指令是\"vite --mode development.local\",所以我的变量加在`.env.development.local`文件中。\n> 如果你的指令中的--mode是development，那就把它改成development.local并新建'.env.development.local'文件。\n> （当然环境的名字是自定义的，我的叫development环境，兴许你的叫dev环境，不要太死板）\n\n## 使用dotenv\n前面也说到，vite也是用了dotenv。那我们也来装个`dotenv`。dotenv 是用来获取换取环境变量的，将环境变量的值直接合并到`process.env`对象中。\n```shell\nnpm i dotenv -D\n```\n\ntinify.mjs中：\n```javascript\n...\n\n// 修改前\ntinify.key = ‘【你的api key】’\nconst IMAGE_SOURCE_ROOT = 'src/assets/romimg/activity/2023/christmas';\n\n// 修改后：\nimport 'dotenv/config';\ntinify.key = process.env.VITE_TINIFY_API_KEY || '【你的api key】';\nconst IMAGE_SOURCE_ROOT = process.env.VITE_TINIFY_DIR || 'src/assets/romimg/activity/2023/christmas';\n\n...\n\n```\n\n## 修改package.json\n然后在指令中，指定使用哪个环境变量文件。\npackage.json：\n```json\n...\n\n// 修改前\n\"tiny\": \"node src/tools/tinify.mjs\",\n\n// 修改后\n\"tiny\": \"node src/tools/tinify.mjs dotenv_config_path=.env.development.local\",\n\n...\n\n```\n\n# 写在最后\n这样就完成了！最后贴一下完整的`tinify.mjs`\n```javascript\nimport tinify from 'tinify';\nimport * as fs from 'fs/promises';\nimport pc from \"picocolors\";\nimport ora from 'ora';   // 使用了Intl.Segmenter，需要node 16+\nconst spinner = ora('Loading');\n\nimport 'dotenv/config';\ntinify.key = process.env.VITE_TINIFY_API_KEY || '【你的api key】';\nconst IMAGE_SOURCE_ROOT = process.env.VITE_TINIFY_DIR || 'src/assets/romimg/activity/2023/christmas';\n\nconst minify = async () => {\n    // 1.读取当前目录下文件\n    spinner.start(pc.cyan('Reading images...'));\n    let files = await fs.readdir(IMAGE_SOURCE_ROOT);\n\n    // 2.压缩其中的图片\n    spinner.text = pc.cyan('Compressing images...');\n    files = files.filter(fileName => /\\.(jpg|jpeg|png)$/gi.test(fileName));\n    const compressedImages = await Promise.all(files.map(async (fileName) => {\n        const filePath = `${IMAGE_SOURCE_ROOT}/${fileName}`;\n        await tinify.fromFile(filePath).toFile(filePath);\n        return fileName;\n    }))\n\n    spinner.info('The following images are compressed:');\n    const tabSpace = '    ';\n    console.log(tabSpace + pc.blue(compressedImages.join(`\\n${tabSpace}`)));\n    spinner.succeed(pc.green('Minify finished!'));\n    spinner.stop();\n}\n\nminify().then();\n```\n","slug":"tinifyTool","published":1,"updated":"2024-01-06T02:25:24.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr1kpsod0013p0ukatu3d63h","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>图片加载时间是首屏体验中很重要的部分，谁会想访问一个一直在处加载状态的网站呢？所以需要图片尽可能的小来减少加载时间。</p>\n<p>一方面，我们日常使用的图片一般是jpg、png格式，我们可以采用一些压缩更好图片格式（例如svg、webp、avif、apng，还有未来可期的heif、jpeg-xl）；</p>\n<p>另一方面就是直接压缩图片了，<a href=\"https://tinypng.com/\">tinypng</a> 是一个在线压缩图片的网站，支持手动拖拽。但是如果压缩的图片多拖来拖去就很麻烦。</p>\n<p>所以写了个脚本工具解放双手，将在vue3项目中使用。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><ol>\n<li>vue3项目</li>\n<li>node 16+环境 （或者nvm）</li>\n<li>一个有图片的文件夹</li>\n</ol>\n<h1 id=\"tinyPng-API\"><a href=\"#tinyPng-API\" class=\"headerlink\" title=\"tinyPng API\"></a>tinyPng API</h1><p>首先获取tinypng的api key -&gt; <a href=\"https://tinypng.com/\">点击访问tinypng</a><br><img src=\"/2024/01/05/tinifyTool/17044356164108.jpg\"></p>\n<p>输入邮箱，会收到一封带链接的邮件，像下面这样。点击<code>Log in with magic link</code>按钮。<br><img src=\"/2024/01/05/tinifyTool/17044359222573.jpg\"><br>进入开发控制台<br><img src=\"/2024/01/05/tinifyTool/17044362771852.jpg\"><br>激活api key，并复制这个api key（就是我打码的这个）。<br><img src=\"/2024/01/05/tinifyTool/17044362356415.jpg\"></p>\n<blockquote>\n<p>这里也可以看到，tinyPng提供了每月500张的免费压缩，超过就要收费了。</p>\n</blockquote>\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i tinify -D // tinypng官方的包 https://tinypng.com/developers/reference/nodejs</span><br><span class=\"line\">npm i ora -D    // 命令行loading（为了好看）</span><br><span class=\"line\">npm i picocolors -D // 命令行带颜色的文字（为了好看）</span><br></pre></td></tr></table></figure>\n<p>全部包都装到devDependencies了，因为咱们只会在开发环境去压缩图片，并不想徒增打包后的体积。</p>\n<h1 id=\"新建tinify-mjs文件\"><a href=\"#新建tinify-mjs文件\" class=\"headerlink\" title=\"新建tinify.mjs文件\"></a>新建tinify.mjs文件</h1><p>src下新建目录tools，新建一个名为tinify.mjs的文件，是mjs哦，不是js。</p>\n<blockquote>\n<p>mjs后缀文件是使用es module规范的js文件，而普通的js后缀使用的是commonjs module规范。</p>\n</blockquote>\n<p>tinify.mjs:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tinify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;tinify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs/promises&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pc <span class=\"keyword\">from</span> <span class=\"string\">&quot;picocolors&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ora <span class=\"keyword\">from</span> <span class=\"string\">&#x27;ora&#x27;</span>;   <span class=\"comment\">// 使用了Intl.Segmenter，需要node 16+</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> spinner = <span class=\"title function_\">ora</span>(<span class=\"string\">&#x27;Loading&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">tinify.<span class=\"property\">key</span> = ‘【你的api key】’</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span> = <span class=\"string\">&#x27;src/assets/romimg/activity/2023/christmas&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">minify</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.读取当前目录下文件</span></span><br><span class=\"line\">    spinner.<span class=\"title function_\">start</span>(pc.<span class=\"title function_\">cyan</span>(<span class=\"string\">&#x27;Reading images...&#x27;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">let</span> files = <span class=\"keyword\">await</span> fs.<span class=\"title function_\">readdir</span>(<span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.压缩其中的图片</span></span><br><span class=\"line\">    spinner.<span class=\"property\">text</span> = pc.<span class=\"title function_\">cyan</span>(<span class=\"string\">&#x27;Compressing images...&#x27;</span>);</span><br><span class=\"line\">    files = files.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">fileName</span> =&gt;</span> <span class=\"regexp\">/\\.(jpg|jpeg|png)$/gi</span>.<span class=\"title function_\">test</span>(fileName));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> compressedImages = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(files.<span class=\"title function_\">map</span>(<span class=\"keyword\">async</span> (fileName) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filePath = <span class=\"string\">`<span class=\"subst\">$&#123;IMAGE_SOURCE_ROOT&#125;</span>/<span class=\"subst\">$&#123;fileName&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tinify.<span class=\"title function_\">fromFile</span>(filePath).<span class=\"title function_\">toFile</span>(filePath);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fileName;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">    spinner.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;The following images are compressed:&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tabSpace = <span class=\"string\">&#x27;    &#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tabSpace + pc.<span class=\"title function_\">blue</span>(compressedImages.<span class=\"title function_\">join</span>(<span class=\"string\">`\\n<span class=\"subst\">$&#123;tabSpace&#125;</span>`</span>)));</span><br><span class=\"line\">    spinner.<span class=\"title function_\">succeed</span>(pc.<span class=\"title function_\">green</span>(<span class=\"string\">&#x27;Minify finished!&#x27;</span>));</span><br><span class=\"line\">    spinner.<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">minify</span>().<span class=\"title function_\">then</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意配置<code>tinify.key</code> 和 <code>IMAGE_SOURCE_ROOT</code>，<code>tinify.key</code>是上一步获取的api key，<code>IMAGE_SOURCE_ROOT</code>是需要压缩的图片目录，比如我的是 ‘src&#x2F;assets&#x2F;romimg&#x2F;activity&#x2F;2023&#x2F;christmas’。</p>\n<h1 id=\"配置package-json\"><a href=\"#配置package-json\" class=\"headerlink\" title=\"配置package.json\"></a>配置package.json</h1><p>在<code>script</code>中新增一条指令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;tiny&quot;: &quot;node src/tools/tinify.mjs&quot;,</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/01/05/tinifyTool/17044380088332.jpg\"></p>\n<p>配置完成后，可以在<code>package.json</code>同级目录下执行 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run tinify</span><br></pre></td></tr></table></figure>\n<p>执行结果：<br><img src=\"/2024/01/05/tinifyTool/17044389253668.jpg\"><br>ok，有loading，有颜色的字看着也挺美观。</p>\n<h1 id=\"使用-local中的环境变量\"><a href=\"#使用-local中的环境变量\" class=\"headerlink\" title=\"使用.local中的环境变量\"></a>使用.local中的环境变量</h1><p>前面说了，每个接口每月只能压缩500张图片。公司愿意为其付费当然是极好的，大家共用一个key。但如果公司不愿意呢？每个开发者使用自己的api key，这个时候就可以用到<code>.local</code>后缀的环境变量文件了。</p>\n<h2 id=\"vite中的环境变量\"><a href=\"#vite中的环境变量\" class=\"headerlink\" title=\"vite中的环境变量\"></a>vite中的环境变量</h2><p>vite本身支持不同环境（开发环境、生产环境）的环境变量，通过指令中的–mode指定是哪个环境，vite还使用了<code>dotenv</code>将对应的环境变量文件中的变量合并到了import.meta.env对象中，供客户端访问。贴一张vite中文官网的截图。<a href=\"https://vitejs.cn/vite3-cn/guide/env-and-mode.html#env-files\">点击访问原链接</a>。<br><img src=\"/2024/01/05/tinifyTool/17044416300532.jpg\"><br>除此之外，还推荐在git中忽略掉<code>.local</code>后缀的环境变量文件，可以让每个人维护各自在<code>.env.*.local</code>中各自的环境变量。<br><img src=\"/2024/01/05/tinifyTool/17044397074751.jpg\"></p>\n<h2 id=\"定义-local中的变量\"><a href=\"#定义-local中的变量\" class=\"headerlink\" title=\"定义.local中的变量\"></a>定义.local中的变量</h2><p>以此基础上，我们直接把<code>api key</code>和<code>IMAGE_SOURCE_ROOT</code>放到<code>.env.*.local</code>文件里。<br>.env.development.local：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VITE_TINIFY_API_KEY=【你的api key】</span><br><span class=\"line\">VITE_TINIFY_DIR=src/assets/romimg/activity/2023/christmas</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为我的dev指令是”vite –mode development.local”,所以我的变量加在<code>.env.development.local</code>文件中。<br>如果你的指令中的–mode是development，那就把它改成development.local并新建’.env.development.local’文件。<br>（当然环境的名字是自定义的，我的叫development环境，兴许你的叫dev环境，不要太死板）</p>\n</blockquote>\n<h2 id=\"使用dotenv\"><a href=\"#使用dotenv\" class=\"headerlink\" title=\"使用dotenv\"></a>使用dotenv</h2><p>前面也说到，vite也是用了dotenv。那我们也来装个<code>dotenv</code>。dotenv 是用来获取换取环境变量的，将环境变量的值直接合并到<code>process.env</code>对象中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i dotenv -D</span><br></pre></td></tr></table></figure>\n\n<p>tinify.mjs中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改前</span></span><br><span class=\"line\">tinify.<span class=\"property\">key</span> = ‘【你的api key】’</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span> = <span class=\"string\">&#x27;src/assets/romimg/activity/2023/christmas&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改后：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dotenv/config&#x27;</span>;</span><br><span class=\"line\">tinify.<span class=\"property\">key</span> = process.<span class=\"property\">env</span>.<span class=\"property\">VITE_TINIFY_API_KEY</span> || <span class=\"string\">&#x27;【你的api key】&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span> = process.<span class=\"property\">env</span>.<span class=\"property\">VITE_TINIFY_DIR</span> || <span class=\"string\">&#x27;src/assets/romimg/activity/2023/christmas&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改package-json\"><a href=\"#修改package-json\" class=\"headerlink\" title=\"修改package.json\"></a>修改package.json</h2><p>然后在指令中，指定使用哪个环境变量文件。<br>package.json：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改前</span></span><br><span class=\"line\"><span class=\"attr\">&quot;tiny&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node src/tools/tinify.mjs&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改后</span></span><br><span class=\"line\"><span class=\"attr\">&quot;tiny&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node src/tools/tinify.mjs dotenv_config_path=.env.development.local&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>这样就完成了！最后贴一下完整的<code>tinify.mjs</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tinify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;tinify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs/promises&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pc <span class=\"keyword\">from</span> <span class=\"string\">&quot;picocolors&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ora <span class=\"keyword\">from</span> <span class=\"string\">&#x27;ora&#x27;</span>;   <span class=\"comment\">// 使用了Intl.Segmenter，需要node 16+</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> spinner = <span class=\"title function_\">ora</span>(<span class=\"string\">&#x27;Loading&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dotenv/config&#x27;</span>;</span><br><span class=\"line\">tinify.<span class=\"property\">key</span> = process.<span class=\"property\">env</span>.<span class=\"property\">VITE_TINIFY_API_KEY</span> || <span class=\"string\">&#x27;【你的api key】&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span> = process.<span class=\"property\">env</span>.<span class=\"property\">VITE_TINIFY_DIR</span> || <span class=\"string\">&#x27;src/assets/romimg/activity/2023/christmas&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">minify</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.读取当前目录下文件</span></span><br><span class=\"line\">    spinner.<span class=\"title function_\">start</span>(pc.<span class=\"title function_\">cyan</span>(<span class=\"string\">&#x27;Reading images...&#x27;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">let</span> files = <span class=\"keyword\">await</span> fs.<span class=\"title function_\">readdir</span>(<span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.压缩其中的图片</span></span><br><span class=\"line\">    spinner.<span class=\"property\">text</span> = pc.<span class=\"title function_\">cyan</span>(<span class=\"string\">&#x27;Compressing images...&#x27;</span>);</span><br><span class=\"line\">    files = files.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">fileName</span> =&gt;</span> <span class=\"regexp\">/\\.(jpg|jpeg|png)$/gi</span>.<span class=\"title function_\">test</span>(fileName));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> compressedImages = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(files.<span class=\"title function_\">map</span>(<span class=\"keyword\">async</span> (fileName) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filePath = <span class=\"string\">`<span class=\"subst\">$&#123;IMAGE_SOURCE_ROOT&#125;</span>/<span class=\"subst\">$&#123;fileName&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tinify.<span class=\"title function_\">fromFile</span>(filePath).<span class=\"title function_\">toFile</span>(filePath);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fileName;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">    spinner.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;The following images are compressed:&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tabSpace = <span class=\"string\">&#x27;    &#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tabSpace + pc.<span class=\"title function_\">blue</span>(compressedImages.<span class=\"title function_\">join</span>(<span class=\"string\">`\\n<span class=\"subst\">$&#123;tabSpace&#125;</span>`</span>)));</span><br><span class=\"line\">    spinner.<span class=\"title function_\">succeed</span>(pc.<span class=\"title function_\">green</span>(<span class=\"string\">&#x27;Minify finished!&#x27;</span>));</span><br><span class=\"line\">    spinner.<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">minify</span>().<span class=\"title function_\">then</span>();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>图片加载时间是首屏体验中很重要的部分，谁会想访问一个一直在处加载状态的网站呢？所以需要图片尽可能的小来减少加载时间。</p>\n<p>一方面，我们日常使用的图片一般是jpg、png格式，我们可以采用一些压缩更好图片格式（例如svg、webp、avif、apng，还有未来可期的heif、jpeg-xl）；</p>\n<p>另一方面就是直接压缩图片了，<a href=\"https://tinypng.com/\">tinypng</a> 是一个在线压缩图片的网站，支持手动拖拽。但是如果压缩的图片多拖来拖去就很麻烦。</p>\n<p>所以写了个脚本工具解放双手，将在vue3项目中使用。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><ol>\n<li>vue3项目</li>\n<li>node 16+环境 （或者nvm）</li>\n<li>一个有图片的文件夹</li>\n</ol>\n<h1 id=\"tinyPng-API\"><a href=\"#tinyPng-API\" class=\"headerlink\" title=\"tinyPng API\"></a>tinyPng API</h1><p>首先获取tinypng的api key -&gt; <a href=\"https://tinypng.com/\">点击访问tinypng</a><br><img src=\"/2024/01/05/tinifyTool/17044356164108.jpg\"></p>\n<p>输入邮箱，会收到一封带链接的邮件，像下面这样。点击<code>Log in with magic link</code>按钮。<br><img src=\"/2024/01/05/tinifyTool/17044359222573.jpg\"><br>进入开发控制台<br><img src=\"/2024/01/05/tinifyTool/17044362771852.jpg\"><br>激活api key，并复制这个api key（就是我打码的这个）。<br><img src=\"/2024/01/05/tinifyTool/17044362356415.jpg\"></p>\n<blockquote>\n<p>这里也可以看到，tinyPng提供了每月500张的免费压缩，超过就要收费了。</p>\n</blockquote>\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i tinify -D // tinypng官方的包 https://tinypng.com/developers/reference/nodejs</span><br><span class=\"line\">npm i ora -D    // 命令行loading（为了好看）</span><br><span class=\"line\">npm i picocolors -D // 命令行带颜色的文字（为了好看）</span><br></pre></td></tr></table></figure>\n<p>全部包都装到devDependencies了，因为咱们只会在开发环境去压缩图片，并不想徒增打包后的体积。</p>\n<h1 id=\"新建tinify-mjs文件\"><a href=\"#新建tinify-mjs文件\" class=\"headerlink\" title=\"新建tinify.mjs文件\"></a>新建tinify.mjs文件</h1><p>src下新建目录tools，新建一个名为tinify.mjs的文件，是mjs哦，不是js。</p>\n<blockquote>\n<p>mjs后缀文件是使用es module规范的js文件，而普通的js后缀使用的是commonjs module规范。</p>\n</blockquote>\n<p>tinify.mjs:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tinify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;tinify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs/promises&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pc <span class=\"keyword\">from</span> <span class=\"string\">&quot;picocolors&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ora <span class=\"keyword\">from</span> <span class=\"string\">&#x27;ora&#x27;</span>;   <span class=\"comment\">// 使用了Intl.Segmenter，需要node 16+</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> spinner = <span class=\"title function_\">ora</span>(<span class=\"string\">&#x27;Loading&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">tinify.<span class=\"property\">key</span> = ‘【你的api key】’</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span> = <span class=\"string\">&#x27;src/assets/romimg/activity/2023/christmas&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">minify</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.读取当前目录下文件</span></span><br><span class=\"line\">    spinner.<span class=\"title function_\">start</span>(pc.<span class=\"title function_\">cyan</span>(<span class=\"string\">&#x27;Reading images...&#x27;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">let</span> files = <span class=\"keyword\">await</span> fs.<span class=\"title function_\">readdir</span>(<span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.压缩其中的图片</span></span><br><span class=\"line\">    spinner.<span class=\"property\">text</span> = pc.<span class=\"title function_\">cyan</span>(<span class=\"string\">&#x27;Compressing images...&#x27;</span>);</span><br><span class=\"line\">    files = files.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">fileName</span> =&gt;</span> <span class=\"regexp\">/\\.(jpg|jpeg|png)$/gi</span>.<span class=\"title function_\">test</span>(fileName));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> compressedImages = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(files.<span class=\"title function_\">map</span>(<span class=\"keyword\">async</span> (fileName) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filePath = <span class=\"string\">`<span class=\"subst\">$&#123;IMAGE_SOURCE_ROOT&#125;</span>/<span class=\"subst\">$&#123;fileName&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tinify.<span class=\"title function_\">fromFile</span>(filePath).<span class=\"title function_\">toFile</span>(filePath);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fileName;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">    spinner.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;The following images are compressed:&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tabSpace = <span class=\"string\">&#x27;    &#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tabSpace + pc.<span class=\"title function_\">blue</span>(compressedImages.<span class=\"title function_\">join</span>(<span class=\"string\">`\\n<span class=\"subst\">$&#123;tabSpace&#125;</span>`</span>)));</span><br><span class=\"line\">    spinner.<span class=\"title function_\">succeed</span>(pc.<span class=\"title function_\">green</span>(<span class=\"string\">&#x27;Minify finished!&#x27;</span>));</span><br><span class=\"line\">    spinner.<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">minify</span>().<span class=\"title function_\">then</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意配置<code>tinify.key</code> 和 <code>IMAGE_SOURCE_ROOT</code>，<code>tinify.key</code>是上一步获取的api key，<code>IMAGE_SOURCE_ROOT</code>是需要压缩的图片目录，比如我的是 ‘src&#x2F;assets&#x2F;romimg&#x2F;activity&#x2F;2023&#x2F;christmas’。</p>\n<h1 id=\"配置package-json\"><a href=\"#配置package-json\" class=\"headerlink\" title=\"配置package.json\"></a>配置package.json</h1><p>在<code>script</code>中新增一条指令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;tiny&quot;: &quot;node src/tools/tinify.mjs&quot;,</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/01/05/tinifyTool/17044380088332.jpg\"></p>\n<p>配置完成后，可以在<code>package.json</code>同级目录下执行 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run tinify</span><br></pre></td></tr></table></figure>\n<p>执行结果：<br><img src=\"/2024/01/05/tinifyTool/17044389253668.jpg\"><br>ok，有loading，有颜色的字看着也挺美观。</p>\n<h1 id=\"使用-local中的环境变量\"><a href=\"#使用-local中的环境变量\" class=\"headerlink\" title=\"使用.local中的环境变量\"></a>使用.local中的环境变量</h1><p>前面说了，每个接口每月只能压缩500张图片。公司愿意为其付费当然是极好的，大家共用一个key。但如果公司不愿意呢？每个开发者使用自己的api key，这个时候就可以用到<code>.local</code>后缀的环境变量文件了。</p>\n<h2 id=\"vite中的环境变量\"><a href=\"#vite中的环境变量\" class=\"headerlink\" title=\"vite中的环境变量\"></a>vite中的环境变量</h2><p>vite本身支持不同环境（开发环境、生产环境）的环境变量，通过指令中的–mode指定是哪个环境，vite还使用了<code>dotenv</code>将对应的环境变量文件中的变量合并到了import.meta.env对象中，供客户端访问。贴一张vite中文官网的截图。<a href=\"https://vitejs.cn/vite3-cn/guide/env-and-mode.html#env-files\">点击访问原链接</a>。<br><img src=\"/2024/01/05/tinifyTool/17044416300532.jpg\"><br>除此之外，还推荐在git中忽略掉<code>.local</code>后缀的环境变量文件，可以让每个人维护各自在<code>.env.*.local</code>中各自的环境变量。<br><img src=\"/2024/01/05/tinifyTool/17044397074751.jpg\"></p>\n<h2 id=\"定义-local中的变量\"><a href=\"#定义-local中的变量\" class=\"headerlink\" title=\"定义.local中的变量\"></a>定义.local中的变量</h2><p>以此基础上，我们直接把<code>api key</code>和<code>IMAGE_SOURCE_ROOT</code>放到<code>.env.*.local</code>文件里。<br>.env.development.local：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VITE_TINIFY_API_KEY=【你的api key】</span><br><span class=\"line\">VITE_TINIFY_DIR=src/assets/romimg/activity/2023/christmas</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为我的dev指令是”vite –mode development.local”,所以我的变量加在<code>.env.development.local</code>文件中。<br>如果你的指令中的–mode是development，那就把它改成development.local并新建’.env.development.local’文件。<br>（当然环境的名字是自定义的，我的叫development环境，兴许你的叫dev环境，不要太死板）</p>\n</blockquote>\n<h2 id=\"使用dotenv\"><a href=\"#使用dotenv\" class=\"headerlink\" title=\"使用dotenv\"></a>使用dotenv</h2><p>前面也说到，vite也是用了dotenv。那我们也来装个<code>dotenv</code>。dotenv 是用来获取换取环境变量的，将环境变量的值直接合并到<code>process.env</code>对象中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i dotenv -D</span><br></pre></td></tr></table></figure>\n\n<p>tinify.mjs中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改前</span></span><br><span class=\"line\">tinify.<span class=\"property\">key</span> = ‘【你的api key】’</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span> = <span class=\"string\">&#x27;src/assets/romimg/activity/2023/christmas&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改后：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dotenv/config&#x27;</span>;</span><br><span class=\"line\">tinify.<span class=\"property\">key</span> = process.<span class=\"property\">env</span>.<span class=\"property\">VITE_TINIFY_API_KEY</span> || <span class=\"string\">&#x27;【你的api key】&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span> = process.<span class=\"property\">env</span>.<span class=\"property\">VITE_TINIFY_DIR</span> || <span class=\"string\">&#x27;src/assets/romimg/activity/2023/christmas&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改package-json\"><a href=\"#修改package-json\" class=\"headerlink\" title=\"修改package.json\"></a>修改package.json</h2><p>然后在指令中，指定使用哪个环境变量文件。<br>package.json：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改前</span></span><br><span class=\"line\"><span class=\"attr\">&quot;tiny&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node src/tools/tinify.mjs&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改后</span></span><br><span class=\"line\"><span class=\"attr\">&quot;tiny&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node src/tools/tinify.mjs dotenv_config_path=.env.development.local&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>这样就完成了！最后贴一下完整的<code>tinify.mjs</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tinify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;tinify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs/promises&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pc <span class=\"keyword\">from</span> <span class=\"string\">&quot;picocolors&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ora <span class=\"keyword\">from</span> <span class=\"string\">&#x27;ora&#x27;</span>;   <span class=\"comment\">// 使用了Intl.Segmenter，需要node 16+</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> spinner = <span class=\"title function_\">ora</span>(<span class=\"string\">&#x27;Loading&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dotenv/config&#x27;</span>;</span><br><span class=\"line\">tinify.<span class=\"property\">key</span> = process.<span class=\"property\">env</span>.<span class=\"property\">VITE_TINIFY_API_KEY</span> || <span class=\"string\">&#x27;【你的api key】&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span> = process.<span class=\"property\">env</span>.<span class=\"property\">VITE_TINIFY_DIR</span> || <span class=\"string\">&#x27;src/assets/romimg/activity/2023/christmas&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">minify</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.读取当前目录下文件</span></span><br><span class=\"line\">    spinner.<span class=\"title function_\">start</span>(pc.<span class=\"title function_\">cyan</span>(<span class=\"string\">&#x27;Reading images...&#x27;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">let</span> files = <span class=\"keyword\">await</span> fs.<span class=\"title function_\">readdir</span>(<span class=\"variable constant_\">IMAGE_SOURCE_ROOT</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.压缩其中的图片</span></span><br><span class=\"line\">    spinner.<span class=\"property\">text</span> = pc.<span class=\"title function_\">cyan</span>(<span class=\"string\">&#x27;Compressing images...&#x27;</span>);</span><br><span class=\"line\">    files = files.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">fileName</span> =&gt;</span> <span class=\"regexp\">/\\.(jpg|jpeg|png)$/gi</span>.<span class=\"title function_\">test</span>(fileName));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> compressedImages = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(files.<span class=\"title function_\">map</span>(<span class=\"keyword\">async</span> (fileName) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filePath = <span class=\"string\">`<span class=\"subst\">$&#123;IMAGE_SOURCE_ROOT&#125;</span>/<span class=\"subst\">$&#123;fileName&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tinify.<span class=\"title function_\">fromFile</span>(filePath).<span class=\"title function_\">toFile</span>(filePath);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fileName;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">    spinner.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;The following images are compressed:&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tabSpace = <span class=\"string\">&#x27;    &#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tabSpace + pc.<span class=\"title function_\">blue</span>(compressedImages.<span class=\"title function_\">join</span>(<span class=\"string\">`\\n<span class=\"subst\">$&#123;tabSpace&#125;</span>`</span>)));</span><br><span class=\"line\">    spinner.<span class=\"title function_\">succeed</span>(pc.<span class=\"title function_\">green</span>(<span class=\"string\">&#x27;Minify finished!&#x27;</span>));</span><br><span class=\"line\">    spinner.<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">minify</span>().<span class=\"title function_\">then</span>();</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/hexoBuild/749ce5f439144de7a0b150c889fc3b6fa3c54abd.jpg@1256w_1258h_!web-article-pic.avif","post":"clr1kpso00009p0ukd1jb9kyj","slug":"749ce5f439144de7a0b150c889fc3b6fa3c54abd.jpg@1256w_1258h_!web-article-pic.avif","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/82fa72b4f744b86815471ccc28642835c05613bb.jpg@1256w_1258h_!web-article-pic.avif","post":"clr1kpso00009p0ukd1jb9kyj","slug":"82fa72b4f744b86815471ccc28642835c05613bb.jpg@1256w_1258h_!web-article-pic.avif","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231124162529375.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231124162529375.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231124200447068.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231124200447068.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231124202636255.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231124202636255.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231124221147987.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231124221147987.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231124223544444.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231124223544444.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231124224809423.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231124224809423.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231124225356273.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231124225356273.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231124230353479.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231124230353479.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231125234021997.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231125234021997.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231125234253370.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231125234253370.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231125235505317.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231125235505317.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231125235814852.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231125235814852.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231125235830604.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231125235830604.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231125235841531.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231125235841531.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231126000012845.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231126000012845.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231126000157214.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231126000157214.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231126000522216.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231126000522216.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231126000721235.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231126000721235.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231126000829839.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231126000829839.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/image-20231126001315843.png","post":"clr1kpso00009p0ukd1jb9kyj","slug":"image-20231126001315843.png","modified":1,"renderable":1},{"_id":"source/_posts/hexoBuild/优雅.webp","post":"clr1kpso00009p0ukd1jb9kyj","slug":"优雅.webp","modified":1,"renderable":1},{"_id":"source/_posts/mobileAdaptation/image-20231205143957173.png","post":"clr1kpso1000bp0ukhzz98ppx","slug":"image-20231205143957173.png","modified":1,"renderable":1},{"_id":"source/_posts/post-test/1700764793648.png","post":"clr1kpso4000gp0ukae5587o9","slug":"1700764793648.png","modified":1,"renderable":1},{"_id":"source/_posts/post-test/1700765121908.png","post":"clr1kpso4000gp0ukae5587o9","slug":"1700765121908.png","modified":1,"renderable":1},{"_id":"source/_posts/post-test/1700765478961.png","post":"clr1kpso4000gp0ukae5587o9","slug":"1700765478961.png","modified":1,"renderable":1},{"_id":"source/_posts/post-test/1700765616084.png","post":"clr1kpso4000gp0ukae5587o9","slug":"1700765616084.png","modified":1,"renderable":1},{"_id":"source/_posts/post-test/image-20231124030828678.png","post":"clr1kpso4000gp0ukae5587o9","slug":"image-20231124030828678.png","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044221850475.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044221850475.jpg","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044356164108.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044356164108.jpg","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044358678824.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044358678824.jpg","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044359222573.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044359222573.jpg","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044360186641.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044360186641.jpg","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044362356415.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044362356415.jpg","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044362771852.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044362771852.jpg","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044380088332.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044380088332.jpg","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044389253668.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044389253668.jpg","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044397074751.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044397074751.jpg","modified":1,"renderable":1},{"_id":"source/_posts/tinifyTool/17044416300532.jpg","post":"clr1kpsod0013p0ukatu3d63h","slug":"17044416300532.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"clr1kpsnt0001p0uk8flpd5s7","category_id":"clr1kpsnx0004p0ukgvne1pxq","_id":"clr1kpso7000jp0uk8j0ud4nk"},{"post_id":"clr1kpsnw0003p0uk3qsofgz1","category_id":"clr1kpsnx0004p0ukgvne1pxq","_id":"clr1kpso8000pp0ukft6wfire"},{"post_id":"clr1kpso6000ip0uk5p8a74ox","category_id":"clr1kpso8000mp0ukcvkgcdzd","_id":"clr1kpso9000up0uk3mxfh56k"},{"post_id":"clr1kpso7000lp0ukfvc4d3o0","category_id":"clr1kpso8000mp0ukcvkgcdzd","_id":"clr1kpsoa000vp0ukbfzz1adg"},{"post_id":"clr1kpso8000op0ukhgc5cjds","category_id":"clr1kpso9000tp0ukbunw0hqq","_id":"clr1kpsoa000wp0uk0nqfdem4"},{"post_id":"clr1kpsob000xp0uk5tnqex0k","category_id":"clr1kpsoc000zp0uk1y23bm8v","_id":"clr1kpsoe0016p0ukcc4zd7aq"},{"post_id":"clr1kpsoc000yp0uk3zp5d3ss","category_id":"clr1kpsoe0015p0uk2zma2pqi","_id":"clr1kpsoe0018p0uk5tzv4x65"},{"post_id":"clr1kpsod0011p0ukbddk8vn6","category_id":"clr1kpsoe0017p0uk7qdda1ri","_id":"clr1kpsof0019p0uka5sxcpv8"}],"PostTag":[{"post_id":"clr1kpsnt0001p0uk8flpd5s7","tag_id":"clr1kpsny0005p0uk0a6ngp07","_id":"clr1kpso4000ep0uk3ndj3heg"},{"post_id":"clr1kpsnw0003p0uk3qsofgz1","tag_id":"clr1kpsny0005p0uk0a6ngp07","_id":"clr1kpso7000kp0ukd3273yyr"},{"post_id":"clr1kpso6000ip0uk5p8a74ox","tag_id":"clr1kpsny0005p0uk0a6ngp07","_id":"clr1kpso8000np0uk88hhgxce"},{"post_id":"clr1kpso7000lp0ukfvc4d3o0","tag_id":"clr1kpsny0005p0uk0a6ngp07","_id":"clr1kpso9000qp0uk1pxbhwfa"},{"post_id":"clr1kpso8000op0ukhgc5cjds","tag_id":"clr1kpsny0005p0uk0a6ngp07","_id":"clr1kpso9000rp0ukcz430h4f"},{"post_id":"clr1kpsob000xp0uk5tnqex0k","tag_id":"clr1kpsny0005p0uk0a6ngp07","_id":"clr1kpsoc0010p0ukckbc3i7m"},{"post_id":"clr1kpsoc000yp0uk3zp5d3ss","tag_id":"clr1kpsny0005p0uk0a6ngp07","_id":"clr1kpsod0012p0uk9i3jddlo"},{"post_id":"clr1kpsod0011p0ukbddk8vn6","tag_id":"clr1kpsny0005p0uk0a6ngp07","_id":"clr1kpsoe0014p0uk1ynha64h"}],"Tag":[{"name":"css","_id":"clr1kpsny0005p0uk0a6ngp07"}]}}